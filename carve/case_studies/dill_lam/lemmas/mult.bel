%-----------------------------------------------------%
% Algebraic properties of multiplicities
%------------------------------------------------------%

rec mult_func : [ ⊢ • α₁ α₂ α] → [ ⊢ • α₁ α₂ α'] → [ ⊢ mult_eq α α'] =
  / total /
  fn MLT1, MLT2 ⇒ case MLT1 of
  | [ ⊢ •/us] ⇒ let [ ⊢ •/us] = MLT2 in [ ⊢ mult/refl]
  | [ ⊢ •/a2] ⇒ let [ ⊢ •/a2] = MLT2 in [ ⊢ mult/refl]
  | [ ⊢ •/a1] ⇒ let [ ⊢ •/a1] = MLT2 in [ ⊢ mult/refl]
  | [ ⊢ •/ω] ⇒ let [ ⊢ •/ω] = MLT2 in [ ⊢ mult/refl]
  ;

rec mult_id : [ ⊢ • used α₂ α] → [ ⊢ mult_eq α₂ α] =
  / total /
  fn MLT ⇒ case MLT of
  | [ ⊢ •/us] ⇒ [ ⊢ mult/refl]
  | [ ⊢ •/a2] ⇒ [ ⊢ mult/refl]
  ;

% False since no longer monoid
% rec mult_get_id : {α:[ ⊢ mult]} [ ⊢ • used α α] = ? ;

% ∙ is commutative

rec mult_comm : [ ⊢ • α₁ α₂ α] → [ ⊢ • α₂ α₁ α] =
  / total /
  fn MLT ⇒ case MLT of
  | [ ⊢ •/us] ⇒ [ ⊢ •/us]
  | [ ⊢ •/a2] ⇒ [ ⊢ •/a1]
  | [ ⊢ •/a1] ⇒ [ ⊢ •/a2]
  | [ ⊢ •/ω] ⇒ [ ⊢ •/ω]
  ;

% ∙ is associative

LF •assoc : • _ _ _ → • _ _ _ → type = •/assoc : • α₂ α₃ α₂₃ → • α₁ α₂₃ α → {MLT1:• α₁ α₂ α₁₂} {MLT2:• α₁₂ α₃ α} •assoc MLT1 MLT2;

rec mult_assoc : {MLT1:[ ⊢ • α₁ α₂ α₁₂]} {MLT2:[ ⊢ • α₁₂ α₃ α]} [ ⊢ •assoc MLT1 MLT2] =
  / total /
  mlam MLT1, MLT2 ⇒ case [ ⊢ MLT1] of
  | [ ⊢ •/us] ⇒
    (case [ ⊢ MLT2] of
    | [ ⊢ •/us] ⇒ [ ⊢ •/assoc •/us •/us _ _]
    | [ ⊢ •/a2] ⇒ [ ⊢ •/assoc •/a2 •/a2 _ _]
    )
  | [ ⊢ •/a1] ⇒
    let [ ⊢ •/a1] = [ ⊢ MLT2] in
    [ ⊢ •/assoc •/us •/a1 _ _]
  | [ ⊢ •/a2] ⇒
    let [ ⊢ •/a1] = [ ⊢ MLT2] in
    [ ⊢ •/assoc •/a1 •/a2 _ _]
  | [ ⊢ •/ω] ⇒
    let [ ⊢ •/ω] = [ ⊢ MLT2] in
    [ ⊢ •/assoc •/ω •/ω _ _]
  ;

rec mult_canc : [ ⊢ • α₁ α₂ α] → [ ⊢ • α₁ α₂' α] → [ ⊢ mult_eq α₂ α₂'] =
  / total /
  fn MLT1, MLT2 ⇒ case MLT1 of
  | [ ⊢ •/us] ⇒ let [ ⊢ •/us] = MLT2 in [ ⊢ mult/refl]
  | [ ⊢ •/a1] ⇒ let [ ⊢ •/a1] = MLT2 in [ ⊢ mult/refl]
  | [ ⊢ •/a2] ⇒ let [ ⊢ •/a2] = MLT2 in [ ⊢ mult/refl]
  | [ ⊢ •/ω] ⇒ let [ ⊢ •/ω] = MLT2 in [ ⊢ mult/refl]
  ;
