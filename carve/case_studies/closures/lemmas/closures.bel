%======================================================%
% Lemmas
%======================================================%

% If W ∈ₙ η, then n < |η| + 1

rec len_vlook_lt : (η:[ ⊢ venv N]) [ ⊢ lookup_venv n[] W η] → [ ⊢ lt n (suc N)] =
  / total 1 /
  fn l ⇒ case l of
  | [ ⊢ vlook/t _] ⇒ lt_suc [ ⊢ _]
  | [ ⊢ vlook/n L1] ⇒ lt_trans (len_vlook_lt [_ ⊢ L1]) (lt_suc [ ⊢ _])
  ;

% Determine a value's type by performing a look-up in the linear context:
% If η : Δ, A^𝟙 ∈ₙ Δ, and W ∈ₙ η, then W : A

rec lookup_hasty : [ ⊢ hasty_env η Δ] → [ ⊢ upd Δ n _ _ A _ 𝟙 _ _] → [ ⊢ lookup_venv n W η]
→ [ ⊢ hasty W A] =
  / total 3 /
  fn e, u, l ⇒ case l of
  | [ ⊢ vlook/t _] ⇒
    (case u of
    | [ ⊢ upd/t _] ⇒ let [ ⊢ hasty_env/c _ D] = e in [ ⊢ D]
    | [ ⊢ upd/n U1] ⇒ impossible len_upd_contra [ ⊢ U1]
    )
  | [ ⊢ vlook/n L1] ⇒
    (case u of
    | [ ⊢ upd/t _] ⇒ impossible lt_irreflex (len_vlook_lt [ ⊢ L1])
    | [ ⊢ upd/n U1] ⇒
      let [ ⊢ hasty_env/c E _] = e in
      lookup_hasty [ ⊢ E] [ ⊢ U1] [ ⊢ L1]
    )
  ;

% Preservation of context relation under merge:
% If η : Δ and Δ₁ ⋈ Δ₂ = Δ, then η : Δ₁ (and Δ₂ by commutativity)

rec pres_hasty_env : [ ⊢ hasty_env η Δ] → [ ⊢ merge Δ₁ Δ₂ Δ] → [ ⊢ hasty_env η Δ₁] =
  / total 1 /
  fn d, m ⇒ case d of
  | [ ⊢ hasty_env/n] ⇒ let [ ⊢ mg/n] = m in [ ⊢ hasty_env/n]
  | [ ⊢ hasty_env/c D Dw] ⇒
    let [ ⊢ mg/c M _] = m in
    let [ ⊢ D2] = pres_hasty_env [ ⊢ D] [ ⊢ M] in
    [ ⊢ hasty_env/c D2 Dw]
  ;

rec pres_hasty_env_r : [ ⊢ hasty_env η Δ] → [ ⊢ merge Δ₁ Δ₂ Δ] → [ ⊢ hasty_env η Δ₂] =
  / total /
  fn d, m ⇒ pres_hasty_env d (merge_comm m)
  ;