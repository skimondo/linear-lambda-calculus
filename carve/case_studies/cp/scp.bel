%======================================================%
% Structural CP
%======================================================%

%------------------------------------------------------%
% Preliminaries
%------------------------------------------------------%

hyp : obj → tp → type.

schema hctx = block x:obj, h:hyp x _;

%------------------------------------------------------%
% Linearity predicate
%------------------------------------------------------%

LF linear : (obj → obj) → type =
| l_fwd1 : linear \x.fwd x Y
| l_fwd2 : linear \x.fwd Y x
| l_close : linear \x.close x
| l_wait : linear \x.wait x P
| l_out : linear Q → linear \x.out x P Q
| l_inp : ({y:obj} linear \x.P x y) → linear \x.inp x P
| l_inl : linear P → linear \x.inl x P
| l_inr : linear P → linear \x.inr x P
| l_choice : linear P → linear Q → linear \x.choice x P Q
| l_wait2 : linear P → linear \z.wait X (P z)
| l_out2 : ({y:obj} linear \z.P z y) → linear \z.out X (P z) Q
| l_out3 : ({x':obj} linear \z.Q z x') → linear \z.out X P (Q z)
| l_inp2 : ({x:obj} {y:obj} linear \z.P z x y) → linear \z.inp X (P z)
| l_pcomp1 : ({x:obj} linear \z.P x z) → linear \z.pcomp _ (\x.P x z) Q
| l_pcomp2 : ({x:obj} linear \z.Q x z) → linear \z.pcomp _ P (\x.Q x z)
| l_inl2 : ({x':obj} linear \z.P z x') → linear \z.inl X (P z)
| l_inr2 : ({x':obj} linear \z.P z x') → linear \z.inr X (P z)
| l_choice2 : ({x':obj} linear \z.P z x') → ({x':obj} linear \z.Q z x') → linear \z.choice X (P z) (Q z);

%------------------------------------------------------%
% Statics of SCP
%------------------------------------------------------%

LF wtp : obj → type =

| wtp_fwd : dual A A'
  → {X:obj} hyp X A
  → {Y:obj} hyp Y A'
  → wtp (fwd X Y)

| wtp_close : {X:obj} hyp X ①
  → wtp (close X)

| wtp_wait : {X:obj} hyp X ⊥
  → wtp P
  → wtp (wait X P)

| wtp_out : linear P
  → {X:obj} hyp X (A ⊗ B)
  → ({y:obj} hyp y A → wtp (P y))
  → ({x:obj} hyp x B → wtp (Q x))
  → wtp (out X P Q)

| wtp_inp : ({x:obj} linear (P x))
  → {X:obj} hyp X (A ⅋ B)
  → ({x:obj} hyp x B → {y:obj} hyp y A → wtp (P x y))
  → wtp (inp X P)

| wtp_pcomp : dual A A'
  → ({x:obj} hyp x A → wtp (P x))
  → ({x:obj} hyp x A' → wtp (Q x))
  → linear P
  → linear Q
  → wtp (pcomp A P Q)

| wtp_inl : {X:obj} hyp X (A ⊕ B)
  → ({x:obj} hyp x A → wtp (P x))
  → wtp (inl X P)

| wtp_inr : {X:obj} hyp X (A ⊕ B)
  → ({x:obj} hyp x B → wtp (P x))
  → wtp (inr X P)

| wtp_choice : {X:obj} hyp X (A & B)
  → ({x:obj} hyp x A → wtp (P x))
  → ({x:obj} hyp x B → wtp (Q x))
  → wtp (choice X P Q);