%======================================================%
% Properties of session types
%======================================================%

%------------------------------------------------------%
% Session types
%------------------------------------------------------%

% Duality is symmetric

rec dual_sym : [ ⊢ dual A A'] → [ ⊢ dual A' A] =
  / total 1 /
  fn DU ⇒ case DU of
  | [ ⊢ D1] ⇒ [ ⊢ D⊥]
  | [ ⊢ D⊥] ⇒  [ ⊢ D1]
  | [ ⊢ D⊗ Dl Dr] ⇒
    let [ ⊢ l] = dual_sym [ ⊢ Dl] in
    let [ ⊢ r] = dual_sym [ ⊢ Dr] in
    [ ⊢ D⅋ l r]
  | [ ⊢ D⅋ Dl Dr] ⇒
    let [ ⊢ l] = dual_sym [ ⊢ Dl] in
    let [ ⊢ r] = dual_sym [ ⊢ Dr] in
    [ ⊢ D⊗ l r]
  | [ ⊢ D⊕ Dl Dr] ⇒
    let [ ⊢ l] = dual_sym [ ⊢ Dl] in
    let [ ⊢ r] = dual_sym [ ⊢ Dr] in
    [ ⊢ D& l r]
  | [ ⊢ D& Dl Dr] ⇒
    let [ ⊢ l] = dual_sym [ ⊢ Dl] in
    let [ ⊢ r] = dual_sym [ ⊢ Dr] in
    [ ⊢ D⊕ l r]
  ;

% Session types have a unique dual

rec dual_uniq : [ ⊢ dual A A'] → [ ⊢ dual A A''] → [ ⊢ eq A' A''] =
  / total 1 /
  fn DU1, DU2 ⇒ case DU1 of
  | [ ⊢ D1] ⇒ let [ ⊢ D1] = DU2 in [ ⊢ refl]
  | [ ⊢ D⊥] ⇒ let [ ⊢ D⊥] = DU2 in [ ⊢ refl]
  | [ ⊢ D⊗ DU1l DU1r] ⇒
    let [ ⊢ D⊗ DU2l DU2r] = DU2 in
    let [ ⊢ refl] = dual_uniq [ ⊢ DU1l] [ ⊢ DU2l] in
    let [ ⊢ refl] = dual_uniq [ ⊢ DU1r] [ ⊢ DU2r] in
    [ ⊢ refl]
  | [ ⊢ D⅋ DU1l DU1r] ⇒
    let [ ⊢ D⅋ DU2l DU2r] = DU2 in
    let [ ⊢ refl] = dual_uniq [ ⊢ DU1l] [ ⊢ DU2l] in
    let [ ⊢ refl] = dual_uniq [ ⊢ DU1r] [ ⊢ DU2r] in
    [ ⊢ refl]
  | [ ⊢ D& DU1l DU1r] ⇒
    let [ ⊢ D& DU2l DU2r] = DU2 in
    let [ ⊢ refl] = dual_uniq [ ⊢ DU1l] [ ⊢ DU2l] in
    let [ ⊢ refl] = dual_uniq [ ⊢ DU1r] [ ⊢ DU2r] in
    [ ⊢ refl]
  | [ ⊢ D⊕ DU1l DU1r] ⇒
    let [ ⊢ D⊕ DU2l DU2r] = DU2 in
    let [ ⊢ refl] = dual_uniq [ ⊢ DU1l] [ ⊢ DU2l] in
    let [ ⊢ refl] = dual_uniq [ ⊢ DU1r] [ ⊢ DU2r] in
    [ ⊢ refl]
  ;

% For any types A,B, either A = B or A ≠ B

LF subtp_pair : (tp → tp) → (tp → tp) → type = 
  | comp_tp/⊗1 : subtp_pair (\t.t ⊗ _) (\t.t ⊗ _)
  | comp_tp/⊗2 : subtp_pair (\t._ ⊗ t) (\t._ ⊗ t)
  | comp_tp/⅋1 : subtp_pair (\t.t ⅋ _) (\t.t ⅋ _)
  | comp_tp/⅋2 : subtp_pair (\t._ ⅋ t) (\t._ ⅋ t)
  | comp_tp/&1 : subtp_pair (\t.t & _) (\t.t & _)
  | comp_tp/&2 : subtp_pair (\t._ & t) (\t._ & t)
  | comp_tp/-o1 : subtp_pair (\t.t -o _) (\t.t -o _)
  | comp_tp/-o2 : subtp_pair (\t._ -o t) (\t._ -o t)
  | comp_tp/⊕1 : subtp_pair (\t.t ⊕ _) (\t.t ⊕ _)
  | comp_tp/⊕2 : subtp_pair (\t._ ⊕ t) (\t._ ⊕ t)
  ;

rec comp_subtp : ([ ⊢ eq A A'] → [ ⊢ false])
→ [ ⊢ subtp_pair (\x.B) (\x.B')] → ([ ⊢ eq B[A] B'[A']] → [ ⊢ false]) =
  / total /
  fn n, SPR, e ⇒ case SPR of
  | [ ⊢ comp_tp/⊗1] ⇒ let [ ⊢ refl] = e in n [ ⊢ refl]
  | [ ⊢ comp_tp/⊗2] ⇒ let [ ⊢ refl] = e in n [ ⊢ refl]
  | [ ⊢ comp_tp/⅋1] ⇒ let [ ⊢ refl] = e in n [ ⊢ refl]
  | [ ⊢ comp_tp/⅋2] ⇒ let [ ⊢ refl] = e in n [ ⊢ refl]
  | [ ⊢ comp_tp/&1] ⇒ let [ ⊢ refl] = e in n [ ⊢ refl]
  | [ ⊢ comp_tp/&2] ⇒ let [ ⊢ refl] = e in n [ ⊢ refl]
  | [ ⊢ comp_tp/-o1] ⇒ let [ ⊢ refl] = e in n [ ⊢ refl]
  | [ ⊢ comp_tp/-o2] ⇒ let [ ⊢ refl] = e in n [ ⊢ refl]
  | [ ⊢ comp_tp/⊕1] ⇒ let [ ⊢ refl] = e in n [ ⊢ refl]
  | [ ⊢ comp_tp/⊕2] ⇒ let [ ⊢ refl] = e in n [ ⊢ refl]
  ; 

inductive CompareTp : {A:[ ⊢ tp]} {B:[ ⊢ tp]} ctype =
  | Tp-Eq : CompareTp [ ⊢ A] [ ⊢ A]
  | Tp-Neq : ([ ⊢ eq A B] → [ ⊢ false]) → CompareTp [ ⊢ A] [ ⊢ B];

rec comp_tps : {A:[ ⊢ tp]} {B:[ ⊢ tp]} CompareTp [ ⊢ A] [ ⊢ B] =
  mlam A, B ⇒ case [ ⊢ A] of
  | [ ⊢ ①] ⇒
    (case [ ⊢ B] of
    | [ ⊢ ①] ⇒ Tp-Eq
    | [ ⊢ ⊥] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊗ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⅋ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ & B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ -o B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊕ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    )
  | [ ⊢ ⊥] ⇒
    (case [ ⊢ B] of
    | [ ⊢ ①] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ ⊥] ⇒ Tp-Eq
    | [ ⊢ B₁ ⊗ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⅋ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ & B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ -o B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊕ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    )
  | [ ⊢ A₁ ⊗ A₂] ⇒
    (case [ ⊢ B] of
    | [ ⊢ ①] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ ⊥] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊗ B₂] ⇒
      (case comp_tps [ ⊢ A₁] [ ⊢ B₁] of
      | Tp-Eq ⇒
        (case comp_tps [ ⊢ A₂] [ ⊢ B₂] of
        | Tp-Eq ⇒ Tp-Eq
        | Tp-Neq n ⇒ Tp-Neq (comp_subtp n [ ⊢ comp_tp/⊗2])
        )
      | Tp-Neq n ⇒ Tp-Neq (comp_subtp n [ ⊢ comp_tp/⊗1])
      )
    | [ ⊢ B₁ ⅋ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ & B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ -o B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊕ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    )
  | [ ⊢ A₁ ⅋ A₂] ⇒
    (case [ ⊢ B] of
    | [ ⊢ ①] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ ⊥] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊗ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⅋ B₂] ⇒
      (case comp_tps [ ⊢ A₁] [ ⊢ B₁] of
      | Tp-Eq ⇒
        (case comp_tps [ ⊢ A₂] [ ⊢ B₂] of
        | Tp-Eq ⇒ Tp-Eq
        | Tp-Neq n ⇒ Tp-Neq (comp_subtp n [ ⊢ comp_tp/⅋2])
        )
      | Tp-Neq n ⇒ Tp-Neq (comp_subtp n [ ⊢ comp_tp/⅋1])
      )
    | [ ⊢ B₁ & B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ -o B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊕ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    )
  | [ ⊢ A₁ & A₂] ⇒
    (case [ ⊢ B] of
    | [ ⊢ ①] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ ⊥] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊗ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⅋ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ & B₂] ⇒
      (case comp_tps [ ⊢ A₁] [ ⊢ B₁] of
      | Tp-Eq ⇒
        (case comp_tps [ ⊢ A₂] [ ⊢ B₂] of
        | Tp-Eq ⇒ Tp-Eq
        | Tp-Neq n ⇒ Tp-Neq (comp_subtp n [ ⊢ comp_tp/&2])
        )
      | Tp-Neq n ⇒ Tp-Neq (comp_subtp n [ ⊢ comp_tp/&1])
      )
    | [ ⊢ B₁ -o B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊕ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    )
  | [ ⊢ A₁ -o A₂] ⇒
    (case [ ⊢ B] of
    | [ ⊢ ①] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ ⊥] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊗ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⅋ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ & B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ -o B₂] ⇒
      (case comp_tps [ ⊢ A₁] [ ⊢ B₁] of
      | Tp-Eq ⇒
        (case comp_tps [ ⊢ A₂] [ ⊢ B₂] of
        | Tp-Eq ⇒ Tp-Eq
        | Tp-Neq n ⇒ Tp-Neq (comp_subtp n [ ⊢ comp_tp/-o2])
        )
      | Tp-Neq n ⇒ Tp-Neq (comp_subtp n [ ⊢ comp_tp/-o1])
      )
    | [ ⊢ B₁ ⊕ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    )
  | [ ⊢ A₁ ⊕ A₂] ⇒
    (case [ ⊢ B] of
    | [ ⊢ ①] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ ⊥] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊗ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⅋ B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ & B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ -o B₂] ⇒ Tp-Neq (fn e ⇒ impossible e)
    | [ ⊢ B₁ ⊕ B₂] ⇒
      (case comp_tps [ ⊢ A₁] [ ⊢ B₁] of
      | Tp-Eq ⇒
        (case comp_tps [ ⊢ A₂] [ ⊢ B₂] of
        | Tp-Eq ⇒ Tp-Eq
        | Tp-Neq n ⇒ Tp-Neq (comp_subtp n [ ⊢ comp_tp/⊕2])
        )
      | Tp-Neq n ⇒ Tp-Neq (comp_subtp n [ ⊢ comp_tp/⊕1])
      )
    )
  ;