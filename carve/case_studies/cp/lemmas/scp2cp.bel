%======================================================%
% Lemmas about translation from SCP to CP
%======================================================%

%------------------------------------------------------%
% Properties of RelUsed, RelName, and Dec
%------------------------------------------------------%

% If RelUsed [Œ® ‚ä¢ Œî] [Œ¶ ‚ä¢ œÉ], then Œî is unrestricted

rec relus_unr : RelUsed [Œ® ‚ä¢ Œî] $[Œ¶ ‚ä¢ $œÉ] ‚Üí [Œ® ‚ä¢ exh Œî] =
  / total 1 /
  fn ru ‚áí case ru of
  | relUsed/n ‚áí [ ‚ä¢ exh/n]
  | relUsed/c ru1 ‚áí let [_ ‚ä¢ EXH] = relus_unr ru1 in [_,x:obj ‚ä¢ exh/c EXH[..] unr/0]
  ;

% If RelName [Œ® ‚ä¢ x] [Œ® ‚ä¢ Œî] [Œ¶ ‚ä¢ œÉ] and (x : A) ‚àà Œ¶, then x is the unique linear element of Œî

LF unqlin : obj ‚Üí tp ‚Üí lctx _ ‚Üí type = unql : upd Œî _ X X A A ùüô ùüò Œî' ‚Üí exh Œî' ‚Üí unqlin X A Œî;

rec relnm_unqlin : RelName [Œ® ‚ä¢ X] [Œ® ‚ä¢ Œî] $[Œ¶ ‚ä¢ $œÉ] ‚Üí [Œ¶ ‚ä¢ hyp X[$œÉ[..]] A[]] ‚Üí [Œ® ‚ä¢ unqlin X A[] Œî] =
  / total 1 /
  fn rn, hp ‚áí case rn of
  | relName/t ru ‚áí
    let [_ ‚ä¢ EXH] = relus_unr ru in
    let [_,b:block x:obj,h:hyp _ _ ‚ä¢ b.2] = hp in
    [_,x:obj ‚ä¢ unql (upd/t _) (exh/c EXH[..] unr/0)]
  | relName/n rn ‚áí
    let [_ ‚ä¢ unql U1 EXH] = relnm_unqlin rn (prune_hyp hp) in
    [_,x:obj ‚ä¢ unql (upd/n U1[..]) (exh/c EXH[..] unr/0)]
  ;

% Given Dec relation, obtain hyp judgment from look-up in explicit context

rec relus_lookup_hyp : RelUsed [Œ® ‚ä¢ Œî] $[Œ¶ ‚ä¢ $œÉ] ‚Üí [Œ® ‚ä¢ upd Œî _ X _ A[] _ _ _ _] ‚Üí [Œ¶ ‚ä¢ hyp X[$œÉ[..]] A[]] =
  / total 1 /
  fn ru, u ‚áí case u of
  | [_ ‚ä¢ upd/t _] ‚áí let relUsed/c _ = ru in [_,b:block x:obj,h:hyp _ _ ‚ä¢ b.2]
  | [_ ‚ä¢ upd/n U1] ‚áí
    let [_ ‚ä¢ U1'] = upd_refl [_ ‚ä¢ U1] in
    let relUsed/c ru1 = ru in
    let Prune-Upd [_ ‚ä¢ U1''] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1'] in
    let [_ ‚ä¢ hy] = relus_lookup_hyp ru1 [_ ‚ä¢ U1''] in
    [_,b:block x:obj,h:hyp _ _ ‚ä¢ hy[..]]
  ;

rec relnm_lookup_hyp : RelName [Œ® ‚ä¢ _] [Œ® ‚ä¢ Œî] $[Œ¶ ‚ä¢ $œÉ] ‚Üí [Œ® ‚ä¢ upd Œî _ X _ A[] _ _ _ _] ‚Üí [Œ¶ ‚ä¢ hyp X[$œÉ[..]] A[]] =
  / total 1 /
  fn rn, u ‚áí case u of
  | [_ ‚ä¢ upd/t _] ‚áí
    (case rn of
    | relName/t _ ‚áí [_,b:block x:obj,h:hyp _ _ ‚ä¢ b.2]
    | relName/n _ ‚áí [_,b:block x:obj,h:hyp _ _ ‚ä¢ b.2]
    )
  | [_ ‚ä¢ upd/n U1] ‚áí
    let [_ ‚ä¢ U1'] = upd_refl [_ ‚ä¢ U1] in
    case rn of
    | relName/t rn1 ‚áí
      let Prune-Upd [_ ‚ä¢ U1''] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1'] in
      let [_ ‚ä¢ hy] = relus_lookup_hyp rn1 [_ ‚ä¢ U1''] in
      [_,b:block x:obj,h:hyp _ _ ‚ä¢ hy[..]]
    | relName/n rn1 ‚áí
      let Prune-Upd [_ ‚ä¢ U1''] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1'] in
      let [_ ‚ä¢ hy] = relnm_lookup_hyp rn1 [_ ‚ä¢ U1''] in
      [_,b:block x:obj,h:hyp _ _ ‚ä¢ hy[..]]
  ;

rec dec_lookup_hyp : Dec [Œ® ‚ä¢ P] [Œ® ‚ä¢ Œî] $[Œ¶ ‚ä¢ $œÉ[..]] ‚Üí [Œ® ‚ä¢ upd Œî _ X _ A[] _ _ _ _] ‚Üí [Œ¶ ‚ä¢ hyp X[$œÉ[..]] A[]] =
  / total 1 /
  fn dc, u ‚áí case dc of
  | Dec/fwd u1 rn ‚áí
    let [_ ‚ä¢ lookint U2] = lookup_changelab u1 u in
    relnm_lookup_hyp rn [_ ‚ä¢ U2]
  | Dec/close rn ‚áí relnm_lookup_hyp rn u
  | Dec/wait u1 dc1 ‚áí
    let [_ ‚ä¢ lookint U2] = lookup_changelab u1 u in
    dec_lookup_hyp dc1 [_ ‚ä¢ U2]
  | Dec/out _ m dc1 dc2 ‚áí
    let ([_ ‚ä¢ U'],[_ ‚ä¢ MG']) = (u,m) in
    let [_ ‚ä¢ merge-look U2 _ _ _ _] = merge_lookup [_ ‚ä¢ U'] [_ ‚ä¢ MG'] in
    prune_hyp (dec_lookup_hyp dc1 [_,x:obj ‚ä¢ upd/n U2[..]])
  | Dec/inp u1 dc1 ‚áí
    let [_ ‚ä¢ lookint U2] = lookup_changelab u1 u in
    prune_hyp (prune_hyp (dec_lookup_hyp dc1 [_,x:obj,y:obj ‚ä¢ upd/n (upd/n U2[..])] ))
  | Dec/pcomp m _ dc1 dc2 ‚áí
    let ([_ ‚ä¢ U'],[_ ‚ä¢ MG']) = (u,m) in
    let [_ ‚ä¢ merge-look U1 _ _ _ _] = merge_lookup [_ ‚ä¢ U'] [_ ‚ä¢ MG'] in
    prune_hyp (dec_lookup_hyp dc1 [_,x:obj ‚ä¢ upd/n U1[..]])
  | Dec/inl u1 dc1 ‚áí
    let [_ ‚ä¢ lookint U2] = lookup_changelab u1 u in
    prune_hyp (dec_lookup_hyp dc1 [_,x:obj ‚ä¢ upd/n U2[..]])
  | Dec/inr u1 dc1 ‚áí
    let [_ ‚ä¢ lookint U2] = lookup_changelab u1 u in
    prune_hyp (dec_lookup_hyp dc1 [_,x:obj ‚ä¢ upd/n U2[..]])
  | Dec/choice u1 dc1 dc2 ‚áí
    let [_ ‚ä¢ lookint U2] = lookup_changelab u1 u in
    prune_hyp (dec_lookup_hyp dc1 [_,x:obj ‚ä¢ upd/n U2[..]])
  ;