%======================================================%
% Lemmas about translation from SCP to CP
%======================================================%

%------------------------------------------------------%
% Appearance of names in processes
%------------------------------------------------------%

% If P does not depend on the variable x then x ‚àâ P

rec in_proc_lemma : (Œ®:ctx) [Œ®,x:obj ‚ä¢ in_proc x P[..]] ‚Üí [ ‚ä¢ false] =
  / total d (in_proc_lemma d) /
  fn a ‚áí case a of
  | [_,x:obj ‚ä¢ inpr/wait_2 A1] ‚áí in_proc_lemma [_,x:obj ‚ä¢ A1]
  | [_,x:obj ‚ä¢ inpr/out_2 (\y.A1)] ‚áí in_proc_lemma [_,x:obj,y:obj ‚ä¢ A1[..,y,x]]
  | [_,x:obj ‚ä¢ inpr/out_3 (\y.A1)] ‚áí in_proc_lemma [_,x:obj,y:obj ‚ä¢ A1[..,y,x]]
  | [_,x:obj ‚ä¢ inpr/inp_2 (\y.\z.A1)] ‚áí in_proc_lemma [_,x:obj,y:obj,z:obj ‚ä¢ A1[..,z,x,y]]
  | [_,x:obj ‚ä¢ inpr/pcomp_1 (\y.A1)] ‚áí in_proc_lemma [_,x:obj,y:obj ‚ä¢ A1[..,y,x]]
  | [_,x:obj ‚ä¢ inpr/pcomp_2 (\y.A1)] ‚áí in_proc_lemma [_,x:obj,y:obj ‚ä¢ A1[..,y,x]]
  | [_,x:obj ‚ä¢ inpr/inl_2' (\y.A1)] ‚áí in_proc_lemma [_,x:obj,y:obj ‚ä¢ A1[..,y,x]]
  | [_,x:obj ‚ä¢ inpr/inr_2 (\y.A1)] ‚áí in_proc_lemma [_,x:obj,y:obj ‚ä¢ A1[..,y,x]]
  | [_,x:obj ‚ä¢ inpr/choice_2 (\y.A1)] ‚áí in_proc_lemma [_,x:obj,y:obj ‚ä¢ A1[..,y,x]]
  | [_,x:obj ‚ä¢ inpr/choice_3 (\y.A1)] ‚áí in_proc_lemma [_,x:obj,y:obj ‚ä¢ A1[..,y,x]]
  ;

% If P ‚ä¢ Œî and x appears linearly in Œî, then x ‚àà P

rec oft_lin_in : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ oft P Œî] ‚Üí [Œ® ‚ä¢ upd Œî n[] X X' A[] A'[] ùüô Œ±[] Œî'] ‚Üí [Œ® ‚ä¢ in_proc X P] =
  / total d (oft_lin_in d) /
  fn d1, u ‚áí
  let [_ ‚ä¢ U_ub] = u in
  case d1 of
  | [_ ‚ä¢ oft/fwd _ U1 U2 E] ‚áí
    (case comp_look [_ ‚ä¢ U1] [_ ‚ä¢ U_ub] of
    | [_ ‚ä¢ look-eq _ _] ‚áí [_ ‚ä¢ inpr/fwd_2]
    | [_ ‚ä¢ look-neq NEQ1[] _ _] ‚áí
      let [_ ‚ä¢ lookintm U'] = lookup_upd [_ ‚ä¢ U1] u [ ‚ä¢ NEQ1] in
      (case comp_look [_ ‚ä¢ U2] [_ ‚ä¢ U'] of
      | [_ ‚ä¢ look-eq _ _] ‚áí [_ ‚ä¢ inpr/fwd_1]
      | [_ ‚ä¢ look-neq NEQ2[] _ _] ‚áí
        let [_ ‚ä¢ lookintm U3] = lookup_upd [_ ‚ä¢ U2] [_ ‚ä¢ U'] [ ‚ä¢ NEQ2] in
        impossible exh_lookup [_ ‚ä¢ E] [_ ‚ä¢ U3]
      )
    )
  | [_ ‚ä¢ oft/close U1 E] ‚áí
    (case comp_look [_ ‚ä¢ U1] [_ ‚ä¢ U_ub] of
    | [_ ‚ä¢ look-eq _ _] ‚áí [_ ‚ä¢ inpr/close]
    | [_ ‚ä¢ look-neq NEQ[] _ _] ‚áí
      let [_ ‚ä¢ lookintm U2] = lookup_upd [_ ‚ä¢ U1] u [ ‚ä¢ NEQ] in
      impossible exh_lookup [_ ‚ä¢ E] [_ ‚ä¢ U2]
    )
  | [_ ‚ä¢ oft/wait U1 O1] ‚áí
    (case comp_look [_ ‚ä¢ U1] [_ ‚ä¢ U_ub] of
    | [_ ‚ä¢ look-eq _ _] ‚áí [_ ‚ä¢ inpr/wait_1]
    | [_ ‚ä¢ look-neq NEQ[] _ _] ‚áí
      let [_ ‚ä¢ lookintm U2] = lookup_upd [_ ‚ä¢ U1] u [ ‚ä¢ NEQ] in
      let [_ ‚ä¢ A] = oft_lin_in [_ ‚ä¢ O1] [_ ‚ä¢ U2] in
      [_ ‚ä¢ inpr/wait_2 A]
    )
  | [_ ‚ä¢ oft/out U1 M (\x.O1) (\x.O2)] ‚áí
    let [_ ‚ä¢ merge-look U2 U3 T[] _ _] = merge_lookup [_ ‚ä¢ U_ub] [_ ‚ä¢ M] in
    (case comp_look [_ ‚ä¢ U1] [_ ‚ä¢ U3] of
    | [_ ‚ä¢ look-eq _ _] ‚áí [_ ‚ä¢ inpr/out_1]
    | [_ ‚ä¢ look-neq NEQ[] _ _] ‚áí
      (case [ ‚ä¢ T] of
      | [ ‚ä¢ ‚Ä¢/a1] ‚áí
        let [_,x:obj ‚ä¢ A] = oft_lin_in [_,x:obj ‚ä¢ O1] [_ ‚ä¢ upd/n U2[..]] in
        [_ ‚ä¢ inpr/out_2 \x.A]
      | [ ‚ä¢ ‚Ä¢/a2] ‚áí
        let [_ ‚ä¢ lookintm U3'] = lookup_upd [_ ‚ä¢ U1] [_ ‚ä¢ U3] [ ‚ä¢ NEQ] in
        let [_,x:obj ‚ä¢ A] = oft_lin_in [_,x:obj ‚ä¢ O2] [_ ‚ä¢ upd/n U3'[..]] in
        [_ ‚ä¢ inpr/out_3 \x.A]
      )
    )
  | [_ ‚ä¢ oft/inp U1 \x.\y.O1] ‚áí
    (case comp_look [_ ‚ä¢ U1] [_ ‚ä¢ U_ub] of
    | [_ ‚ä¢ look-eq _ _] ‚áí [_ ‚ä¢ inpr/inp_1]
    | [_ ‚ä¢ look-neq NEQ[] _ _] ‚áí
      let [_ ‚ä¢ lookintm U2] = lookup_upd [_ ‚ä¢ U1] u [ ‚ä¢ NEQ] in
      let [_,x:obj,y:obj ‚ä¢ A] = oft_lin_in [_,x:obj,y:obj ‚ä¢ O1] [_ ‚ä¢ upd/n (upd/n U2[..])] in
      [_ ‚ä¢ inpr/inp_2 \x.\y.A]
    )
  | [_ ‚ä¢ oft/pcomp _ M (\x.O1) (\x.O2)] ‚áí
    (case merge_lookup [_ ‚ä¢ U_ub] [_ ‚ä¢ M] of
    | [_ ‚ä¢ merge-look U1 _ ‚Ä¢/a1 _ _] ‚áí
      let [_,x:obj ‚ä¢ A] = oft_lin_in [_,x:obj ‚ä¢ O1] [_ ‚ä¢ upd/n U1[..]] in
      [_ ‚ä¢ inpr/pcomp_1 \x.A]
    | [_ ‚ä¢ merge-look _ U2 ‚Ä¢/a2 _ _] ‚áí
      let [_,x:obj ‚ä¢ A] = oft_lin_in [_,x:obj ‚ä¢ O2] [_ ‚ä¢ upd/n U2[..]] in
      [_ ‚ä¢ inpr/pcomp_2 \x.A]
    )
  | [_ ‚ä¢ oft/inl U1 \x.O1] ‚áí
    (case comp_look [_ ‚ä¢ U1] [_ ‚ä¢ U_ub] of
    | [_ ‚ä¢ look-eq _ _] ‚áí [_ ‚ä¢ inpr/inl_1]
    | [_ ‚ä¢ look-neq NEQ[] _ _] ‚áí
      let [_ ‚ä¢ lookintm U2] = lookup_upd [_ ‚ä¢ U1] u [ ‚ä¢ NEQ] in
      let [_,x:obj ‚ä¢ A] = oft_lin_in [_,x:obj ‚ä¢ O1] [_ ‚ä¢ upd/n U2[..]] in
      [_ ‚ä¢ inpr/inl_2' \x.A]
    )
  | [_ ‚ä¢ oft/inr U1 \x.O1] ‚áí
    (case comp_look [_ ‚ä¢ U1] [_ ‚ä¢ U_ub] of
    | [_ ‚ä¢ look-eq _ _] ‚áí [_ ‚ä¢ inpr/inr_1]
    | [_ ‚ä¢ look-neq NEQ[] _ _] ‚áí
      let [_ ‚ä¢ lookintm U2] = lookup_upd [_ ‚ä¢ U1] u [ ‚ä¢ NEQ] in
      let [_,x:obj ‚ä¢ A] = oft_lin_in [_,x:obj ‚ä¢ O1] [_ ‚ä¢ upd/n U2[..]] in
      [_ ‚ä¢ inpr/inr_2 \x.A]
    )
  | [_ ‚ä¢ oft/choice U1 (\x.O1) (\x.O2)] ‚áí
    (case comp_look [_ ‚ä¢ U1] [_ ‚ä¢ U_ub] of
    | [_ ‚ä¢ look-eq _ _] ‚áí [_ ‚ä¢ inpr/choice_1]
    | [_ ‚ä¢ look-neq NEQ[] _ _] ‚áí
      let [_ ‚ä¢ lookintm U2] = lookup_upd [_ ‚ä¢ U1] u [ ‚ä¢ NEQ] in
      let [_,x:obj ‚ä¢ A] = oft_lin_in [_,x:obj ‚ä¢ O1] [_ ‚ä¢ upd/n U2[..]] in
      [_ ‚ä¢ inpr/choice_2 \x.A]
    )
  ;

%------------------------------------------------------%
% Structural properties of CP typing judgment
%------------------------------------------------------%

% 'Prune' LF context to remove dependencies:
% Obtain from [Œ®,x:obj ‚ä¢ oft P Œî[..]] that P cannot depend on x

inductive PruneOft : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) {O:[Œ® ‚ä¢ oft P Œî]} ctype =
  Prune-Oft : [Œ® ‚ä¢ oft P Œî] ‚Üí {O:[Œ®,x:obj ‚ä¢ oft P[..] Œî[..]]} PruneOft [Œ®,x:obj ‚ä¢ O];

rec prune_oft : {O:[Œ®,x:obj ‚ä¢ oft P Œî[..]]} PruneOft [Œ®,x:obj ‚ä¢ O] =
  / total d (prune_oft d) /
  mlam O ‚áí case [_ ‚ä¢ O] of
  | [_,x:obj ‚ä¢ oft/fwd DU[] U1 U2 E] ‚áí
    let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let Prune-Upd [_ ‚ä¢ U2'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U2] in
    let [_ ‚ä¢ E'] = prune_exh [_ ‚ä¢ E] in
    Prune-Oft [_ ‚ä¢ oft/fwd DU[] U1' U2' E'] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/close U1 E] ‚áí
    let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let [_ ‚ä¢ E'] = prune_exh [_ ‚ä¢ E] in
    Prune-Oft [_ ‚ä¢ oft/close U1' E'] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/wait U1 O1] ‚áí
    let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let Prune-Oft [_ ‚ä¢ O1'] [_,x:obj ‚ä¢ _] = prune_oft [_,x:obj ‚ä¢ O1] in
    Prune-Oft [_ ‚ä¢ oft/wait U1' O1'] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/out U1 M (\y.O1) (\y.O2)] ‚áí
    let Prune-Merge [_ ‚ä¢ M'] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M] in
    let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let Prune-Oft [_,x:obj ‚ä¢ O1'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O1[..,y,x]] in
    let Prune-Oft [_,x:obj ‚ä¢ O2'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O2[..,y,x]] in
    Prune-Oft [_ ‚ä¢ oft/out U1' M' (\x.O1') (\x.O2')] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/inp U1 \z.\w.O1] ‚áí
    let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let Prune-Oft [_,x:obj,y:obj ‚ä¢ O1'] [_ ‚ä¢ _] = prune_oft [_,x:obj,y:obj,z:obj ‚ä¢ O1[..,z,x,y]] in
    Prune-Oft [_ ‚ä¢ oft/inp U1' \z.\w.O1'] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/pcomp DU[] M (\y.O1) (\y.O2)] ‚áí
    let Prune-Merge [_ ‚ä¢ M'] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M] in
    let Prune-Oft [_,x:obj ‚ä¢ O1'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O1[..,y,x]] in
    let Prune-Oft [_,x:obj ‚ä¢ O2'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O2[..,y,x]] in
    Prune-Oft [_ ‚ä¢ oft/pcomp DU[] M' (\x.O1') (\x.O2')] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/inl U1 \y.O1] ‚áí
    let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let Prune-Oft [_,x:obj ‚ä¢ O1'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O1[..,y,x]] in
    Prune-Oft [_ ‚ä¢ oft/inl U1' \x.O1'] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/inr U1 \y.O1] ‚áí
    let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let Prune-Oft [_,x:obj ‚ä¢ O1'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O1[..,y,x]] in
    Prune-Oft [_ ‚ä¢ oft/inr U1' \x.O1'] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ oft/choice U1 (\y.O1) (\y.O2)] ‚áí
    let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1] in
    let Prune-Oft [_,x:obj ‚ä¢ O1'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O1[..,y,x]] in
    let Prune-Oft [_,x:obj ‚ä¢ O2'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O2[..,y,x]] in
    Prune-Oft [_ ‚ä¢ oft/choice U1' (\x.O1') (\x.O2')] [_,x:obj ‚ä¢ _]
  ;

% Exchange lemma:
% If P ‚ä¢ Œî and Œî[(n, x) ‚Üî (m, y)] = Œî', P ‚ä¢ Œî'
% (Plus two corollaries as helper lemmas for permuting the topmost elements of a context)

rec oft_exch : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ oft P Œî] ‚Üí [Œ® ‚ä¢ exch Œî n X m Y Œî'] ‚Üí [Œ® ‚ä¢ oft P Œî'] =
  fn d1, ex1 ‚áí
  let [_ ‚ä¢ exch/u NEQ[] EX1 EX2] = ex1 in
  case d1 of
  | [_ ‚ä¢ oft/fwd DU U1 U2 E1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' U3 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ U1] in
    let [_ ‚ä¢ exch-e EX1'' EX2'' U4 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1'] [_ ‚ä¢ EX2'] [_ ‚ä¢ U2] in
    let [_ ‚ä¢ E2] = exch_exh [_ ‚ä¢ E1] [_ ‚ä¢ exch/u NEQ[] EX1'' EX2''] in
    [_ ‚ä¢ oft/fwd DU U3 U4 E2]
  | [_ ‚ä¢ oft/close U1 E1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' U2 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ U1] in
    let [_ ‚ä¢ E2] = exch_exh [_ ‚ä¢ E1] [_ ‚ä¢ exch/u NEQ[] EX1' EX2'] in
    [_ ‚ä¢ oft/close U2 E2]
  | [_ ‚ä¢ oft/wait U1 O1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' U2 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ U1] in
    let [_ ‚ä¢ O2] = oft_exch [_ ‚ä¢ O1] [_ ‚ä¢ exch/u NEQ[] EX1' EX2'] in
    [_ ‚ä¢ oft/wait U2 O2]
  | [_ ‚ä¢ oft/out U1 M1 (\x.O1) (\x.O2)] ‚áí
    let [_ ‚ä¢ exch-mg EX1a EX2a EX1b EX2b _ M2 _ _ _ _ _] = exch_merge [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ M1] in
    let [_ ‚ä¢ exch-e EX1b' EX2b' U2 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1b] [_ ‚ä¢ EX2b] [_ ‚ä¢ U1] in
    let [_,x:obj ‚ä¢ O1'] = oft_exch [_,x:obj ‚ä¢ O1] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n EX1a[..]) (upd/n EX2a[..])] in
    let [_,x:obj ‚ä¢ O2'] = oft_exch [_,x:obj ‚ä¢ O2] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n EX1b'[..]) (upd/n EX2b'[..])] in
    [_ ‚ä¢ oft/out U2 M2 (\x.O1') (\x.O2')]
  | [_ ‚ä¢ oft/inp U1 \x.\y.O1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' U2 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ U1] in
    let [_,x:obj,y:obj ‚ä¢ O2] = oft_exch [_,x:obj,y:obj ‚ä¢ O1] [_,x:obj,y:obj ‚ä¢ exch/u NEQ[] (upd/n (upd/n EX1'[..])) (upd/n (upd/n EX2'[..]))] in
    [_ ‚ä¢ oft/inp U2 \x.\y.O2]
  | [_ ‚ä¢ oft/pcomp DU M1 (\x.O1) (\x.O2)] ‚áí
    let [_ ‚ä¢ exch-mg U1a U2a U1b U2b _ M2 _ _ _ _ _] = exch_merge [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ M1] in
    let [_,x:obj ‚ä¢ O1'] = oft_exch [_,x:obj ‚ä¢ O1] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n U1a[..]) (upd/n U2a[..])] in
    let [_,x:obj ‚ä¢ O2'] = oft_exch [_,x:obj ‚ä¢ O2] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n U1b[..]) (upd/n U2b[..])] in
    [_ ‚ä¢ oft/pcomp DU M2 (\x.O1') (\x.O2')]
  | [_ ‚ä¢ oft/inl U1 \x.O1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' U2 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ U1] in
    let [_,x:obj ‚ä¢ O2] = oft_exch [_,x:obj ‚ä¢ O1] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n EX1'[..]) (upd/n EX2'[..])] in
    [_ ‚ä¢ oft/inl U2 \x.O2]
  | [_ ‚ä¢ oft/inr U1 \x.O1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' U2 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ U1] in
    let [_,x:obj ‚ä¢ O2] = oft_exch [_,x:obj ‚ä¢ O1] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n EX1'[..]) (upd/n EX2'[..])] in
    [_ ‚ä¢ oft/inr U2 \x.O2]
  | [_ ‚ä¢ oft/choice U1 (\x.O1) (\x.O2)] ‚áí 
    let [_ ‚ä¢ exch-e EX1' EX2' U2 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ U1] in
    let [_,x:obj ‚ä¢ O1'] = oft_exch [_,x:obj ‚ä¢ O1] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n EX1'[..]) (upd/n EX2'[..])] in
    let [_,x:obj ‚ä¢ O2'] = oft_exch [_,x:obj ‚ä¢ O2] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n EX1'[..]) (upd/n EX2'[..])] in
    [_ ‚ä¢ oft/choice U2 (\x.O1') (\x.O2')]
  ;

rec oft_exch_top : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ oft P (cons (cons Œî X A[] Œ±[]) Y B[] Œ≤[])] ‚Üí [Œ® ‚ä¢ oft P (cons (cons Œî Y B[] Œ≤[]) X A[] Œ±[])] =
  / total /
  fn O ‚áí oft_exch O (exch_top [_ ‚ä¢ _] [_ ‚ä¢ _] [ ‚ä¢ _] [ ‚ä¢ _] [_ ‚ä¢ _] [ ‚ä¢ _] [ ‚ä¢ _])
  ;

rec oft_exch_top2 : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]])
[Œ® ‚ä¢ oft P (cons (cons (cons Œî X A Œ±) Y B Œ≤) Z C Œ≥)] ‚Üí [Œ® ‚ä¢ oft P (cons (cons (cons Œî Y B Œ≤) Z C Œ≥) X A Œ±)] =
  / total /
  fn d1 ‚áí
  let [_ ‚ä¢ _]:[_ ‚ä¢ oft _ (cons (cons (cons Œî X A[] Œ±[]) Y B[] Œ≤[]) _ _ _)] = d1 in
  let [_ ‚ä¢ exch/u NEQ[] EX1 EX2] = exch_top [_ ‚ä¢ Œî] [_ ‚ä¢ X] [ ‚ä¢ A] [ ‚ä¢ Œ±] [_ ‚ä¢ Y] [ ‚ä¢ B] [ ‚ä¢ Œ≤] in
  oft_exch_top (oft_exch d1 [_ ‚ä¢ exch/u NEQ[] (upd/n EX1) (upd/n EX2)])
  ;

% Strengthening lemma:
% (1) If P ‚ä¢ (Œî, x :‚Å∞ A), then P ‚ä¢ Œî
% (2) if P ‚ä¢ (Œî, x :‚Å∞ A, y :¬π B), then P ‚ä¢ (Œî, y :¬π B) [corollary of (1) using exchange lemma]

rec oft_str : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ oft P (cons Œî X A[] ùüò)] ‚Üí [Œ® ‚ä¢ oft P Œî] =
  / total d (oft_str d) /
  fn d1 ‚áí case d1 of
  | [_ ‚ä¢ oft/fwd DU (upd/n U1) (upd/n U2) (exh/c E _)] ‚áí [_ ‚ä¢ oft/fwd DU U1 U2 E]
  | [_ ‚ä¢ oft/close (upd/n U1) (exh/c E _)] ‚áí [_ ‚ä¢ oft/close U1 E]
  | [_ ‚ä¢ oft/wait (upd/n U1) O1] ‚áí
    let [_ ‚ä¢ O2] = oft_str [_ ‚ä¢ O1] in
    [_ ‚ä¢ oft/wait U1 O2]
  | [_ ‚ä¢ oft/out (upd/n U1) (mg/c M ‚Ä¢/us) (\x.O1) (\x.O2)] ‚áí
    let [_,x:obj ‚ä¢ O1'] = oft_str (oft_exch_top [_,x:obj ‚ä¢ O1]) in
    let [_,x:obj ‚ä¢ O2'] = oft_str (oft_exch_top [_,x:obj ‚ä¢ O2]) in
    [_ ‚ä¢ oft/out U1 M (\x.O1') (\x.O2')]
  | [_ ‚ä¢ oft/inp (upd/n U1) \x.\y.O1] ‚áí
    let [_,x:obj,y:obj ‚ä¢ O1'] = oft_str (oft_exch_top2 [_,x:obj,y:obj ‚ä¢ O1]) in
    [_ ‚ä¢ oft/inp U1 \x.\y.O1']
  | [_ ‚ä¢ oft/pcomp DU (mg/c M ‚Ä¢/us) (\x.O1) (\x.O2)] ‚áí
    let [_,x:obj ‚ä¢ O1'] = oft_str (oft_exch_top [_,x:obj ‚ä¢ O1]) in
    let [_,x:obj ‚ä¢ O2'] = oft_str (oft_exch_top [_,x:obj ‚ä¢ O2]) in
    [_ ‚ä¢ oft/pcomp DU M (\x.O1') (\x.O2')]
  | [_ ‚ä¢ oft/inl (upd/n U1) \x.O1] ‚áí
    let [_,x:obj ‚ä¢ O2] = oft_str (oft_exch_top [_,x:obj ‚ä¢ O1]) in
    [_ ‚ä¢ oft/inl U1 \x.O2]
  | [_ ‚ä¢ oft/inr (upd/n U1) \x.O1] ‚áí
    let [_,x:obj ‚ä¢ O2] = oft_str (oft_exch_top [_,x:obj ‚ä¢ O1]) in
    [_ ‚ä¢ oft/inr U1 \x.O2]
  | [_ ‚ä¢ oft/choice (upd/n U1) (\x.O1) (\x.O2)] ‚áí
    let [_,x:obj ‚ä¢ O1'] = oft_str (oft_exch_top [_,x:obj ‚ä¢ O1]) in
    let [_,x:obj ‚ä¢ O2'] = oft_str (oft_exch_top [_,x:obj ‚ä¢ O2]) in
    [_ ‚ä¢ oft/choice U1 (\x.O1') (\x.O2')]
  ;

rec oft_str_cor : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ®,x:obj,y:obj ‚ä¢ oft P[..,y] (cons (cons Œî[..] x A[] ùüò) y B[] ùüô)]
‚Üí [Œ®,x:obj ‚ä¢ oft P (cons Œî[..] x B[] ùüô)] =
  fn d1 ‚áí
  let [_,x:obj,y:obj ‚ä¢ O1] = oft_str (oft_exch_top d1) in
  let Prune-Oft [_,x:obj ‚ä¢ O2] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O1[..,y,x]] in
  [_,x:obj ‚ä¢ O2]
  ;

% Weakening lemma:
% If P ‚ä¢ Œî, then P ‚ä¢ (Œî, x :‚Å∞ A) for any x, A

rec oft_weak : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ oft P Œî] ‚Üí {X:[Œ® ‚ä¢ obj]} {A:[ ‚ä¢ tp]} [Œ® ‚ä¢ oft P (cons Œî X A[] ùüò)] =
  / total 1 /
  fn O ‚áí mlam X, A ‚áí
  case O of
  | [_ ‚ä¢ oft/fwd DU[] U1 U2 E] ‚áí [_ ‚ä¢ oft/fwd DU[] (upd/n U1) (upd/n U2) (exh/c E unr/0)]
  | [_ ‚ä¢ oft/close U1 E] ‚áí [_ ‚ä¢ oft/close (upd/n U1) (exh/c E unr/0)]
  | [_ ‚ä¢ oft/wait U1 O1] ‚áí
    let [_ ‚ä¢ O1'] = oft_weak [_ ‚ä¢ O1] [_ ‚ä¢ X] [ ‚ä¢ A] in
    [_ ‚ä¢ oft/wait (upd/n U1) O1']
  | [_ ‚ä¢ oft/out U1 M (\x.O1) (\x.O2)] ‚áí
    let [_,x:obj ‚ä¢ O1'] = oft_exch_top (oft_weak [_,x:obj ‚ä¢ O1] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    let [_,x:obj ‚ä¢ O2'] = oft_exch_top (oft_weak [_,x:obj ‚ä¢ O2] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    [_ ‚ä¢ oft/out (upd/n U1) (mg/c M ‚Ä¢/us) (\x.O1') (\x.O2')]
  | [_ ‚ä¢ oft/inp U1 \x.\y.O1] ‚áí
    let [_,x:obj,y:obj ‚ä¢ _]:[_,x:obj,y:obj ‚ä¢ oft _ (cons (cons Œî'[..] _ C[] _) _ _ _)] = [_,x:obj,y:obj ‚ä¢ O1] in
    let [_,x:obj ‚ä¢ exch/u NEQ[] EX1 EX2] = exch_top [_,x:obj ‚ä¢ Œî'[..]] [_,x:obj ‚ä¢ x] [ ‚ä¢ C] [ ‚ä¢ ùüô] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A] [ ‚ä¢ ùüò]  in
    let O1'' = oft_exch_top (oft_weak [_,x:obj,y:obj ‚ä¢ O1] [_,x:obj,y:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    let [_,x:obj,y:obj ‚ä¢ O1'] = oft_exch O1'' [_,x:obj,y:obj ‚ä¢ exch/u NEQ[] (upd/n EX1[..,x]) (upd/n EX2[..,x])] in
    [_ ‚ä¢ oft/inp (upd/n U1) \x.\y.O1']
  | [_ ‚ä¢ oft/pcomp DU[] M (\x.O1) (\x.O2)] ‚áí
    let [_,x:obj ‚ä¢ O1'] = oft_exch_top (oft_weak [_,x:obj ‚ä¢ O1] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    let [_,x:obj ‚ä¢ O2'] = oft_exch_top (oft_weak [_,x:obj ‚ä¢ O2] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    [_ ‚ä¢ oft/pcomp DU[] (mg/c M ‚Ä¢/us) (\x.O1') (\x.O2')]
  | [_ ‚ä¢ oft/inl U1 \x.O1] ‚áí
    let [_,x:obj ‚ä¢ O1'] = oft_exch_top (oft_weak [_,x:obj ‚ä¢ O1] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    [_ ‚ä¢ oft/inl (upd/n U1) \x.O1']
  | [_ ‚ä¢ oft/inr U1 \x.O1] ‚áí
    let [_,x:obj ‚ä¢ O1'] = oft_exch_top (oft_weak [_,x:obj ‚ä¢ O1] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    [_ ‚ä¢ oft/inr (upd/n U1) \x.O1']
  | [_ ‚ä¢ oft/choice U1 (\x.O1) (\x.O2)] ‚áí
    let [_,x:obj ‚ä¢ O1'] = oft_exch_top (oft_weak [_,x:obj ‚ä¢ O1] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    let [_,x:obj ‚ä¢ O2'] = oft_exch_top (oft_weak [_,x:obj ‚ä¢ O2] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    [_ ‚ä¢ oft/choice (upd/n U1) (\x.O1') (\x.O2')]
  ;

%------------------------------------------------------%
% Main lemmas
%------------------------------------------------------%

% Preservation of typing under structural equivalence

rec oft_cong : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ oft P Œî] ‚Üí [Œ® ‚ä¢ P ‚â° Q] ‚Üí [Œ® ‚ä¢ oft Q Œî] =
  / total 1 /
  fn O, CG ‚áí case CG of
  | [_ ‚ä¢ ‚â°comm DU[]] ‚áí
    let [_ ‚ä¢ oft/pcomp DU1[] M1 (\x.O1) (\x.O2)] = O in
    let [ ‚ä¢ refl] = dual_uniq [ ‚ä¢ DU] [ ‚ä¢ DU1] in
    let [_ ‚ä¢ M2] = merge_comm [_ ‚ä¢ M1] in
    let [ ‚ä¢ DU2] = dual_sym [ ‚ä¢ DU] in
    [_ ‚ä¢ oft/pcomp DU2[] M2 (\x.O2) (\x.O1)]
  | [_ ‚ä¢ ‚â°assoc] ‚áí
    let [_ ‚ä¢ oft/pcomp DU1[] M1 (\x.oft/pcomp DU2[] (mg/c M2' T1[]) (\y.O1) (\y.O2)) (\x.O3)] = O in
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M2'] in
    case [ ‚ä¢ T1] of
    | [ ‚ä¢ ‚Ä¢/a1] ‚áí
      let [_,x:obj,y:obj ‚ä¢ _]:[_,x:obj,y:obj ‚ä¢ oft _ (cons (cons Œî‚ÇÅ[..] _ A[] _) _ _ _)] = [_,x:obj,y:obj ‚ä¢ O1] in
      let [_,x:obj ‚ä¢ U] = refl_top [_,x:obj ‚ä¢ Œî‚ÇÅ[..]] [_,x:obj ‚ä¢ x] [ ‚ä¢ A] [ ‚ä¢ ùüô] in
      let [_,x:obj,y:obj ‚ä¢ NIN] = oft_lin_in [_,x:obj,y:obj ‚ä¢ O1] [_,x:obj,y:obj ‚ä¢ upd/n U[..,x]] in
      impossible in_proc_lemma [_,x:obj,y:obj ‚ä¢ NIN[..,y,x]]
    | [ ‚ä¢ ‚Ä¢/a2] ‚áí
      let [_ ‚ä¢ mg-assoc M3 M4 _ _] = merge_assoc [_ ‚ä¢ M1] [_ ‚ä¢ M2] in
      let [_,x:obj ‚ä¢ O1'] = oft_str_cor [_,x:obj,y:obj ‚ä¢ O1] in
      let [_,x:obj,y:obj ‚ä¢ O2'[..,y,x]] = oft_exch_top [_,x:obj,y:obj ‚ä¢ O2] in
      let [ ‚ä¢ _]:[ ‚ä¢ dual _ B'] = [ ‚ä¢ DU2] in
      let [_,x:obj,y:obj ‚ä¢ O3'] = oft_exch_top (oft_weak [_,x:obj,y:obj ‚ä¢ O3[..,y]] [_,x:obj,y:obj ‚ä¢ x] [ ‚ä¢ B']) in
      [_ ‚ä¢ oft/pcomp DU2[] M4 (\x.O1') (\x.oft/pcomp DU1[] (mg/c M3[..] ‚Ä¢/a1) (\y.O2') (\y.O3'))]
  ;

% Renaming lemma:
% If P ‚ä¢ (Œî, x :¬π A), then P[y/x] ‚ä¢ Œî[y :‚Å∞ A ‚Ü¶‚Çô y :¬π A]

rec oft_rename : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ®,x:obj ‚ä¢ oft P (cons Œî[..] x A[] ùüô)] ‚Üí [Œ® ‚ä¢ upd Œî n[] X X A[] A[] ùüò ùüô Œî'] ‚Üí [Œ® ‚ä¢ oft P[..,X] Œî'] =
  fn O, U ‚áí
  let ([_ ‚ä¢ U_ub],[_ ‚ä¢ U_sym]) = (U,upd_symm U) in
  case O of
  | [_,x:obj ‚ä¢ oft/fwd DU[] U1 U2 E1] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let [_,x:obj ‚ä¢ upd/n U2''] = [_,x:obj ‚ä¢ U2] in
      let Prune-Upd [_ ‚ä¢ U2'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U2''] in
      let [_,x:obj ‚ä¢ exh/c E2' _] = [_,x:obj ‚ä¢ E1] in
      let [_ ‚ä¢ E2] = prune_exh [_,x:obj ‚ä¢ E2'] in
      [_ ‚ä¢ oft/fwd DU[] U_sym U2' E2]
    | [_,x:obj ‚ä¢ upd/n U1''] ‚áí
      (case [_,x:obj ‚ä¢ U2] of
      | [_,x:obj ‚ä¢ upd/t _] ‚áí
        let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1''] in
        let [_ ‚ä¢ upd-ch U3 U4 _ _] = upd_changeorder [_ ‚ä¢ U_sym] [_ ‚ä¢ U1'] (lookup_lab_neq_2 U [_ ‚ä¢ U1']) in 
        let [_,x:obj ‚ä¢ exh/c E2' _] = [_,x:obj ‚ä¢ E1] in
        let [_ ‚ä¢ E2] = prune_exh [_,x:obj ‚ä¢ E2'] in
        [_ ‚ä¢ oft/fwd DU[] U3 U4 E2]
      | [_,x:obj ‚ä¢ upd/n _] ‚áí
        let [_,x:obj ‚ä¢ exh/c _ T[]] = [_,x:obj ‚ä¢ E1] in
        impossible [ ‚ä¢ T]
      )
    )
  | [_,x:obj ‚ä¢ oft/close U1 E] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí 
      let [_,x:obj ‚ä¢ exh/c E1 _] = [_ ‚ä¢ E] in
      let [_ ‚ä¢ E2] = prune_exh [_,x:obj ‚ä¢ E1] in
      [_ ‚ä¢ oft/close U_sym E2]
    | [_,x:obj ‚ä¢ upd/n _] ‚áí
      let [_,x:obj ‚ä¢ exh/c _ T[]] = [_,x:obj ‚ä¢ E] in
      impossible [ ‚ä¢ T]
    )
  | [_,x:obj ‚ä¢ oft/wait U1 O1] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let [_,x:obj ‚ä¢ O1''] = oft_str [_,x:obj ‚ä¢ O1] in
      let Prune-Oft [_ ‚ä¢ O1'] [_,x:obj ‚ä¢ _] = prune_oft [_,x:obj ‚ä¢ O1''] in
      [_ ‚ä¢ oft/wait U_sym O1']
    | [_,x:obj ‚ä¢ upd/n U1''] ‚áí
      let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1''] in
      let [_ ‚ä¢ upd-ch U3 U4 _ _] = upd_changeorder [_ ‚ä¢ U_sym] [_ ‚ä¢ U1'] (lookup_lab_neq_2 U [_ ‚ä¢ U1']) in 
      let [_ ‚ä¢ O1'] = oft_rename [_,x:obj ‚ä¢ O1] (upd_symm [_ ‚ä¢ U4]) in
      [_ ‚ä¢ oft/wait U3 O1']
    )
  | [_,x:obj ‚ä¢ oft/out U1 (mg/c M T[]) (\y.O1) (\y.O2)] ‚áí
    let Prune-Merge [_ ‚ä¢ M1] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M] in
    let [_ ‚ä¢ merge-upd U2 U3 ‚Ä¢/us M2 _ _ _] = merge_upd_cor [_ ‚ä¢ U_ub] [_ ‚ä¢ M1] [ ‚ä¢ T] in
    (case [ ‚ä¢ T] of
    | [ ‚ä¢ ‚Ä¢/a1] ‚áí
      let [_ ‚ä¢ cx/refl] = upd_func [_ ‚ä¢ U3] (upd_refl [_ ‚ä¢ U3]) in
      let [_,x:obj ‚ä¢ upd/n U1''] = [_,x:obj ‚ä¢ U1] in
      let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1''] in
      let [_,x:obj,y:obj ‚ä¢ O1''] = oft_exch_top [_,x:obj,y:obj ‚ä¢ O1[..,y,x]] in
      let [_,x:obj ‚ä¢ O1'] = oft_rename [_,x:obj,y:obj ‚ä¢ O1''] [_,x:obj ‚ä¢ upd/n U2[..]] in
      let [_,x:obj,y:obj ‚ä¢ O2''] = oft_str (oft_exch_top [_,x:obj,y:obj ‚ä¢ O2[..,y,x]]) in
      let Prune-Oft [_,x:obj ‚ä¢ O2'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O2''] in
      [_ ‚ä¢ oft/out U1' M2 (\y.O1') (\y.O2')]
    | [ ‚ä¢ ‚Ä¢/a2] ‚áí
      let [_ ‚ä¢ cx/refl] = upd_func [_ ‚ä¢ U2] (upd_refl [_ ‚ä¢ U2]) in
      let [_,x:obj,y:obj ‚ä¢ O1''] = oft_str (oft_exch_top [_,x:obj,y:obj ‚ä¢ O1[..,y,x]]) in
      let Prune-Oft [_,x:obj ‚ä¢ O1'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O1''] in
      let [_ ‚ä¢ U3_sym] = upd_symm [_ ‚ä¢ U3] in
      (case [_,x:obj ‚ä¢ U1] of
      | [_,x:obj ‚ä¢ upd/t _] ‚áí
        let [_,x:obj,y:obj ‚ä¢ O2''] = oft_str (oft_exch_top [_,x:obj,y:obj ‚ä¢ O2[..,y,x]]) in
        let Prune-Oft [_,x:obj ‚ä¢ O2'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O2''] in
        [_ ‚ä¢ oft/out U3_sym M2 (\x.O1') (\x.O2')]
      | [_,x:obj ‚ä¢ upd/n U1''] ‚áí
        let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1''] in
        let [_ ‚ä¢ upd-ch U3 U4 _ _] = upd_changeorder [_ ‚ä¢ U3_sym] [_ ‚ä¢ U1'] (lookup_lab_neq_2 [_ ‚ä¢ U3] [_ ‚ä¢ U1']) in 
        let [_,x:obj,y:obj ‚ä¢ O2''] = oft_exch_top [_,x:obj,y:obj ‚ä¢ O2[..,y,x]] in
        let [_,x:obj ‚ä¢ O2'] = oft_rename [_,x:obj,y:obj ‚ä¢ O2''] (upd_symm [_,x:obj ‚ä¢ upd/n U4[..]]) in
        [_ ‚ä¢ oft/out U3 M2 (\x.O1') (\x.O2')]
      )
    )
  | [_,x:obj ‚ä¢ oft/inp U1 \y.\z.O1] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let [_,x:obj,y:obj,z:obj ‚ä¢ O1'] = oft_str (oft_exch_top2 [_,y:obj,z:obj,x:obj ‚ä¢ O1[..,x,y,z]]) in
      let Prune-Oft [_,x:obj,y:obj ‚ä¢ O1''] [_,x:obj,y:obj,z:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj,z:obj ‚ä¢ O1'] in
      [_ ‚ä¢ oft/inp U_sym \x.\y.O1'']
    | [_,x:obj ‚ä¢ upd/n U1''] ‚áí
      let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1''] in
      let [_ ‚ä¢ upd-ch U3 U4 _ _] = upd_changeorder [_ ‚ä¢ U_sym] [_ ‚ä¢ U1'] (lookup_lab_neq_2 U [_ ‚ä¢ U1']) in 
      let [_,x:obj,y:obj ‚ä¢ O1'] = oft_rename (oft_exch_top2 [_,y:obj,z:obj,x:obj ‚ä¢ O1[..,x,y,z]]) (upd_symm [_,x:obj,y:obj ‚ä¢ upd/n (upd/n U4[..])]) in
      [_ ‚ä¢ oft/inp U3 \x.\y.O1']
    )
  | [_,x:obj ‚ä¢ oft/pcomp DU[] (mg/c M T[]) (\y.O1) (\y.O2)] ‚áí
    let Prune-Merge [_ ‚ä¢ M1] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M] in
    let [_ ‚ä¢ merge-upd U1 U2 ‚Ä¢/us M2 _ _ _] = merge_upd_cor [_ ‚ä¢ U_ub] [_ ‚ä¢ M1] [ ‚ä¢ T] in
    (case [ ‚ä¢ T] of
    | [ ‚ä¢ ‚Ä¢/a1] ‚áí
      let [_ ‚ä¢ cx/refl] = upd_func [_ ‚ä¢ U2] (upd_refl [_ ‚ä¢ U2]) in
      let [_,x:obj,y:obj ‚ä¢ O1''] = oft_exch_top [_,x:obj,y:obj ‚ä¢ O1[..,y,x]] in
      let [_,x:obj ‚ä¢ O1'] = oft_rename [_,x:obj,y:obj ‚ä¢ O1''] [_,x:obj ‚ä¢ upd/n U1[..]] in
      let [_,x:obj,y:obj ‚ä¢ O2''] = oft_str (oft_exch_top [_,x:obj,y:obj ‚ä¢ O2[..,y,x]]) in
      let Prune-Oft [_,x:obj ‚ä¢ O2'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O2''] in
      [_ ‚ä¢ oft/pcomp DU[] M2 (\x.O1') (\x.O2')]
    | [ ‚ä¢ ‚Ä¢/a2] ‚áí
      let [_ ‚ä¢ cx/refl] = upd_func [_ ‚ä¢ U1] (upd_refl [_ ‚ä¢ U1]) in
      let [_,x:obj,y:obj ‚ä¢ O1''] = oft_str (oft_exch_top [_,x:obj,y:obj ‚ä¢ O1[..,y,x]]) in
      let Prune-Oft [_,x:obj ‚ä¢ O1'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O1''] in
      let [_,x:obj,y:obj ‚ä¢ O2''] = oft_exch_top [_,x:obj,y:obj ‚ä¢ O2[..,y,x]] in
      let [_,x:obj ‚ä¢ O2'] = oft_rename [_,x:obj,y:obj ‚ä¢ O2''] [_,x:obj ‚ä¢ upd/n U2[..]] in
      [_ ‚ä¢ oft/pcomp DU[] M2 (\x.O1') (\x.O2')]
    )
  | [_,x:obj ‚ä¢ oft/inl U1 \y.O1] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let [_,x:obj,y:obj ‚ä¢ O1''] = oft_str (oft_exch_top [_,x:obj,y:obj ‚ä¢ O1[..,y,x]]) in
      let Prune-Oft [_,x:obj ‚ä¢ O1'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O1''] in
      [_ ‚ä¢ oft/inl U_sym \x.O1']
    | [_,x:obj ‚ä¢ upd/n U1''] ‚áí
      let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1''] in
      let [_ ‚ä¢ upd-ch U3 U4 _ _] = upd_changeorder [_ ‚ä¢ U_sym] [_ ‚ä¢ U1'] (lookup_lab_neq_2 U [_ ‚ä¢ U1']) in 
      let [_,x:obj,y:obj ‚ä¢ O1'] = oft_exch_top [_,x:obj,y:obj ‚ä¢ O1[..,y,x]] in
      let [_,x:obj ‚ä¢ O1''] = oft_rename [_,x:obj,y:obj ‚ä¢ O1'] (upd_symm [_,x:obj ‚ä¢ upd/n U4[..]]) in
      [_ ‚ä¢ oft/inl U3 \x.O1'']
    )
  | [_,x:obj ‚ä¢ oft/inr U1 \y.O1] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let [_,x:obj,y:obj ‚ä¢ O1''] = oft_str (oft_exch_top [_,x:obj,y:obj ‚ä¢ O1[..,y,x]]) in
      let Prune-Oft [_,x:obj ‚ä¢ O1'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O1''] in
      [_ ‚ä¢ oft/inr U_sym \x.O1']
    | [_,x:obj ‚ä¢ upd/n U1''] ‚áí
      let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1''] in
      let [_ ‚ä¢ upd-ch U3 U4 _ _] = upd_changeorder [_ ‚ä¢ U_sym] [_ ‚ä¢ U1'] (lookup_lab_neq_2 U [_ ‚ä¢ U1']) in 
      let [_,x:obj,y:obj ‚ä¢ O1'] = oft_exch_top [_,x:obj,y:obj ‚ä¢ O1[..,y,x]] in
      let [_,x:obj ‚ä¢ O1''] = oft_rename [_,x:obj,y:obj ‚ä¢ O1'] (upd_symm [_,x:obj ‚ä¢ upd/n U4[..]]) in
      [_ ‚ä¢ oft/inr U3 \x.O1'']
    )
  | [_,x:obj ‚ä¢ oft/choice U1 (\y.O1) (\y.O2)] ‚áí
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let [_,x:obj,y:obj ‚ä¢ O1''] = oft_str (oft_exch_top [_,x:obj,y:obj ‚ä¢ O1[..,y,x]]) in
      let [_,x:obj,y:obj ‚ä¢ O2''] = oft_str (oft_exch_top [_,x:obj,y:obj ‚ä¢ O2[..,y,x]]) in
      let Prune-Oft [_,x:obj ‚ä¢ O1'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O1''] in
      let Prune-Oft [_,x:obj ‚ä¢ O2'] [_,x:obj,y:obj ‚ä¢ _] = prune_oft [_,x:obj,y:obj ‚ä¢ O2''] in
      [_ ‚ä¢ oft/choice U_sym (\x.O1') (\x.O2')]
    | [_,x:obj ‚ä¢ upd/n U1''] ‚áí
      let Prune-Upd [_ ‚ä¢ U1'] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ U1''] in
      let [_ ‚ä¢ upd-ch U3 U4 _ _] = upd_changeorder [_ ‚ä¢ U_sym] [_ ‚ä¢ U1'] (lookup_lab_neq_2 U [_ ‚ä¢ U1']) in 
      let [_,x:obj,y:obj ‚ä¢ O1''] = oft_exch_top [_,x:obj,y:obj ‚ä¢ O1[..,y,x]] in
      let [_,x:obj,y:obj ‚ä¢ O2''] = oft_exch_top [_,x:obj,y:obj ‚ä¢ O2[..,y,x]] in
      let [_,x:obj ‚ä¢ O1'] = oft_rename [_,x:obj,y:obj ‚ä¢ O1''] (upd_symm [_,x:obj ‚ä¢ upd/n U4[..]]) in
      let [_,x:obj ‚ä¢ O2'] = oft_rename [_,x:obj,y:obj ‚ä¢ O2''] (upd_symm [_,x:obj ‚ä¢ upd/n U4[..]]) in
      [_ ‚ä¢ oft/choice U3 (\x.O1') (\x.O2')]
    )
  ;