%------------------------------------------------------%
% Terms and Types
%------------------------------------------------------%

LF tm : type =
| lam : (tm → tm) → tm
| app : tm → tm → tm;

LF tp : type =
| lolli : tp → tp → tp
| nat : tp;

schema tctx = tm;

inductive Eq : (Ψ:tctx) [Ψ ⊢ tm] → [Ψ ⊢ tm] → ctype = Eq/refl : Eq [Ψ ⊢ M] [Ψ ⊢ M];

%------------------------------------------------------%
% Typing contexts
%------------------------------------------------------%

LF lctx : type =
| nil : lctx
| cons : lctx → tm → tp → mult → lctx;

LF cx_eq : lctx → lctx → type = cx/refl : cx_eq Δ Δ;

%------------------------------------------------------%
% Main properties of typing contexts
%------------------------------------------------------%

% No linear assumptions occur in Δ

inductive Exh : (Ψ : tctx) [Ψ ⊢ lctx] → ctype =
| Exh/n : Exh [ ⊢ nil]
| Exh/c : Exh [Ψ ⊢ Δ] → Exh [Ψ, x:tm ⊢ cons Δ[..] x _ 𝟘];

% Splitting / joining typing contexts: Δ₁ ⋈ Δ₂ = Δ

inductive Merge : (Ψ:tctx) [Ψ ⊢ lctx] → [Ψ ⊢ lctx] → [Ψ ⊢ lctx] → ctype =
| Mg/n : Merge [ ⊢ nil] [ ⊢ nil] [ ⊢ nil]
| Mg/c : Merge [Ψ ⊢ Δ₁] [Ψ ⊢ Δ₂] [Ψ ⊢ Δ] → [ ⊢ • α₁ α₂ α]
  → Merge [Ψ, x:tm ⊢ cons Δ₁[..] x A[] α₁[]] [Ψ, x:tm ⊢ cons Δ₂[..] x A[] α₂[]] [Ψ, x:tm ⊢ cons Δ[..] x A[] α[]];

% Δ⧵{X :^α A} = Δ'
% i.e., X appears in Δ with type A and multiplicity α, and 
% Δ' is the result of removing is from the context

inductive Rmv : (Ψ:tctx) [Ψ ⊢ lctx] → [Ψ ⊢ tm] → [ ⊢ tp] → [ ⊢ mult] → {Ψ':tctx} {$S:$[Ψ ⊢ Ψ']} [Ψ' ⊢ lctx] → ctype = 
| Rmv/t :
    Rmv [Ψ, x:tm ⊢ cons Δ[..] x A[] α[]]
        [Ψ, x:tm ⊢ x] [ ⊢ A] [ ⊢ α]
        [Ψ] $[Ψ,x:tm ⊢ ..] [Ψ ⊢ Δ]
| Rmv/c : Rmv [Ψ ⊢ Δ] [Ψ ⊢ #p] [ ⊢ B] [ ⊢ β] [Φ] $[Ψ ⊢ $S] [Φ ⊢ Δ']
  → Rmv [Ψ, x:tm ⊢ cons Δ[..] x A[] α[]]
        [Ψ, x:tm ⊢ #p[..]] [ ⊢ B] [ ⊢ β]
        [Φ, x:tm] $[Ψ, x:tm ⊢ $S[..], x]
        [Φ,x:tm ⊢ cons Δ'[..] x A[] α[]];

inductive Append : (Ψ:tctx) (Ψ':tctx) (Φ:tctx) [Ψ ⊢ lctx] → [Ψ' ⊢ lctx] → [Φ ⊢ lctx] → ctype =
| App/n : Append [Ψ ⊢ Δ] [ ⊢ nil] [Ψ ⊢ Δ]
| App/c : Append [Ψ ⊢ Δ] [Ψ' ⊢ Δ'] [Φ ⊢ Δ₀]
    → Append [Ψ ⊢ Δ] [Ψ', x:tm ⊢ cons Δ'[..] x A[] α[]] [Φ, x:tm ⊢ cons Δ₀[..] x A[] α[]];

%{ - - - - - - - - - - - - - - - - - -
% Update type and/or multiplicity of variable

inductive Upd : (Ψ:tctx) [Ψ ⊢ lctx] → [Ψ ⊢ tm] → [ ⊢ tp] → [ ⊢ mult] → [ ⊢ tp] → [ ⊢ mult] → [Ψ ⊢ lctx] → ctype = 
| Upd/t :
    Upd [Ψ, x:tm ⊢ cons Δ[..] x A[] α[]]
        [Ψ, x:tm ⊢ x] [ ⊢ A] [ ⊢ α] [ ⊢ B] [ ⊢ β]
        [Ψ, x:tm ⊢ cons Δ[..] x B[] β[]]
| Upd/n :
    Upd [Ψ ⊢ Δ] [Ψ ⊢ X] [ ⊢ A] [ ⊢ α] [ ⊢ B] [ ⊢ β] [Ψ ⊢ Δ']
  → Upd [Ψ, x:tm ⊢ cons Δ[..] x C[] γ[]]
        [Ψ, x:tm ⊢ x] [ ⊢ A] [ ⊢ α] [ ⊢ B] [ ⊢ β]
        [Ψ, x:tm ⊢ cons Δ'[..] x C[] γ[]];
%- - - - - - - - - - - - - - - - - - }%

%------------------------------------------------------%
% Lookup directly defined for other properties
%------------------------------------------------------%

inductive LkupExh : (Ψ:tctx) [Ψ ⊢ lctx] → [Ψ ⊢ tm] → [ ⊢ tp] → ctype = 
| Lkp/exh : Rmv [Ψ ⊢ Δ] [Ψ ⊢ #p] [ ⊢ A] [ ⊢ 𝟙] [Φ] $[Ψ ⊢ $S] [Φ ⊢ Δ']
    → Exh [Φ ⊢ Δ'] 
    → LkupExh [Ψ ⊢ Δ] [Ψ ⊢ #p] [ ⊢ A];