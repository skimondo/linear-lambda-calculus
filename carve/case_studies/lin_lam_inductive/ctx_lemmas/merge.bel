%------------------------------------------------------%
% Algebraic properties of merge
%------------------------------------------------------%

% Δ₁ ⋈ Δ₂ = Δ₂ ⋈ Δ₁

rec merge_comm : (Ψ:tctx) Merge [Ψ ⊢ Δ₁] [Ψ ⊢ Δ₂] [Ψ ⊢ Δ]
→ Merge [Ψ ⊢ Δ₂] [Ψ ⊢ Δ₁] [Ψ ⊢ Δ] =
  / total 1 /
  fn mg ⇒ case mg of
  | Mg/n ⇒ Mg/n
  | Mg/c mg1 mlt1 ⇒
    let mg2  = merge_comm mg1 in
    let mlt2 = mult_comm mlt1 in
    Mg/c mg2 mlt2
  ;

% If exh(Δ₁), then Δ₁ ⋈ Δ₂ = Δ₂

rec merge_id : (Ψ:tctx) Merge [Ψ ⊢ Δ₁] [Ψ ⊢ Δ₂] [Ψ ⊢ Δ]
→ Exh [Ψ ⊢ Δ₁] → [Ψ ⊢ cx_eq Δ₂ Δ] =
  / total 1 /
  fn mg, exh ⇒ case mg of
  | Mg/n ⇒ [_ ⊢ cx/refl]
  | Mg/c mg1 mlt ⇒
    let Exh/c exh1 = exh in
    let [_ ⊢ cx/refl] = merge_id mg1 exh1 in
    case mlt of
    | [ ⊢ •/us] ⇒ [_ ⊢ cx/refl]
    | [ ⊢ •/a2] ⇒ [_ ⊢ cx/refl]
  ;

% (Δ₁ ⋈ Δ₂) ⋈ Δ₃ = Δ₁ ⋈ (Δ₂ ⋈ Δ₃)

inductive MergeAssoc : (Ψ:tctx) [Ψ ⊢ lctx] → [Ψ ⊢ lctx] → [Ψ ⊢ lctx] → [Ψ ⊢ lctx] → ctype = 
  | Mg/assoc : Merge [Ψ ⊢ Δ₂] [Ψ ⊢ Δ₃] [Ψ ⊢ Δ₂₃] → Merge [Ψ ⊢ Δ₁] [Ψ ⊢ Δ₂₃] [Ψ ⊢ Δ]
    → MergeAssoc [Ψ ⊢ Δ₁] [Ψ ⊢ Δ₂] [Ψ ⊢ Δ₃] [Ψ ⊢ Δ];

rec merge_assoc : (Ψ:tctx)
Merge [Ψ ⊢ Δ₁] [Ψ ⊢ Δ₂] [Ψ ⊢ Δ₁₂] → Merge [Ψ ⊢ Δ₁₂] [Ψ ⊢ Δ₃] [Ψ ⊢ Δ]
→ MergeAssoc [Ψ ⊢ Δ₁] [Ψ ⊢ Δ₂] [Ψ ⊢ Δ₃] [Ψ ⊢ Δ] =
  / total 2 /
  fn mg1, mg2 ⇒ case mg2 of
  | Mg/n ⇒ let Mg/n = mg1 in Mg/assoc Mg/n Mg/n
  | Mg/c mg2' [ ⊢ mlt2] ⇒
    let Mg/c mg1' [ ⊢ mlt1] = mg1 in
    let Mg/assoc mg3 mg4 = merge_assoc mg1' mg2' in
    let [ ⊢ •/assoc mlt3 mlt4 _ _] = mult_assoc [ ⊢ mlt1] [ ⊢ mlt2] in
    Mg/assoc (Mg/c mg3 [ ⊢ mlt3]) (Mg/c mg4 [ ⊢ mlt4])
  ;

%------------------------------------------------------%
% Interaction with context manipulation
%------------------------------------------------------%

% Δ₁ ⋈ Δ₂ = Δ iff Δ₁⧵{(X:A)^α₁} ⋈ Δ₂⧵{(X:A)^α₂} = Δ⧵{(X:A)^(α₁•α₂)}
% (Can also be viewed as lookup properties:
  % - (X:A)^α ∈ₙ (Δ₁ ⋈ Δ₂), then (X:A)^α₁ ∈ₙ Δ₁ and (X:A)^α₂ ∈ₙ Δ₂ for some α₁∙α₂ = α
  % - If (X:A) ∈ₙ Δ₁, then (X:A)^α₂ ∈ₙ Δ₂ and (X:A)^α ∈ₙ (Δ₁ ⋈ Δ₂) for some α₁∙α₂ = α

inductive MgStr : (Ψ:tctx) (Ψ':tctx)
  [Ψ ⊢ lctx] → [Ψ ⊢ lctx] → [Ψ ⊢ lctx] → [Ψ ⊢ tm] → [ ⊢ tp] → [ ⊢ mult] → {$S:$[Ψ ⊢ Ψ']} [Ψ' ⊢ lctx] → ctype = 
  | Mg/str : Merge [Φ ⊢ Δ₁'] [Φ ⊢ Δ₂'] [Φ ⊢ Δ'] → [ ⊢ • α₁ α₂ α]
  → Rmv [Ψ ⊢ Δ₁] [Ψ ⊢ X] [ ⊢ A] [ ⊢ α₁] [Φ] $[Ψ ⊢ $S] [Φ ⊢ Δ₁']
  → Rmv [Ψ ⊢ Δ₂] [Ψ ⊢ X] [ ⊢ A] [ ⊢ α₂] [Φ] $[Ψ ⊢ $S] [Φ ⊢ Δ₂']
  → MgStr [Ψ ⊢ Δ₁] [Ψ ⊢ Δ₂] [Ψ ⊢ Δ] [Ψ ⊢ X] [ ⊢ A] [ ⊢ α] $[Ψ ⊢ $S] [Φ ⊢ Δ']
  ;

rec merge_str :
Merge [Ψ ⊢ Δ₁] [Ψ ⊢ Δ₂] [Ψ ⊢ Δ]
→ Rmv [Ψ ⊢ Δ] [Ψ ⊢ X] [ ⊢ A] [ ⊢ α] [Φ] $[Ψ ⊢ $S] [Φ ⊢ Δ']
→ MgStr [Ψ ⊢ Δ₁] [Ψ ⊢ Δ₂] [Ψ ⊢ Δ] [Ψ ⊢ X] [ ⊢ A] [ ⊢ α] $[Ψ ⊢ $S] [Φ ⊢ Δ'] =
  / total 2 /
  fn mg, rm ⇒ case rm of
  | Rmv/t ⇒
    let Mg/c mg' mlt1 = mg in
    Mg/str mg' mlt1 Rmv/t Rmv/t
  | Rmv/c rm' ⇒
    let Mg/c mg' mlt1 = mg in
    let Mg/str mg'' mlt2 rm1 rm2 = merge_str mg' rm' in
    Mg/str (Mg/c mg'' mlt1) mlt2 (Rmv/c rm1) (Rmv/c rm2)
  ;