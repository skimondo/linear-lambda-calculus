%------------------------------------------------------%
% Variables
%------------------------------------------------------%

LF var : type = 𝕏 : var; % dummy variable for de Bruijn

LF var_eq : var → var → type = var/refl : var_eq X X;

schema ctx = var;

%------------------------------------------------------%
% Terms
%------------------------------------------------------%

LF tm : type =
| hyp : nat → tm % use `hyp' instead of `var' since the latter is used by infrastructure
| lam : tm → tm
| app : tm → tm → tm;

LF tm_eq : tm → tm → type = tm/refl : tm_eq M M;

% Using de Bruijn indices:

% sh_up M n M' ≡ M' is the result of shifting indices of free variables in M above n up by 1

LF sh_up : tm → nat → tm → type =
| shu/v1 : lt k n → sh_up (hyp k) n (hyp k)
| shu/v2 : leq n k → sh_up (hyp k) n (hyp (suc k))
| shu/lam : sh_up M (suc n) M' → sh_up (lam M) n (lam M')
| shu/app : sh_up M₁ n M₁' → sh_up M₂ n M₂' → sh_up (app M₁ M₂) n (app M₁' M₂');

% sh_up M n M' ≡ M' is the result of shifting indices of free variables in M above n down by 1

LF sh_d : tm → nat → tm → type =
| shd/v1 : lt k n → sh_d (hyp k) n (hyp k)
| shd/v2 : leq n k → sh_d (hyp (suc k)) n (hyp k)
| shd/lam : sh_d M (suc n) M' → sh_d (lam M) n (lam M')
| shd/app : sh_d M n M' → sh_d N n N' → sh_d (app M N) n (app M' N');

% subst n N M M' ≡ [N/n]M = M'

LF subst : nat → tm → tm → tm → type =
| sub/v1 : subst k N (hyp k) N
| sub/v2 : neq n k → subst n N (hyp k) (hyp k)
| sub/lam : sh_up N zero N' → subst (suc n) N' M M' → subst n N (lam M) (lam M')
| sub/app : subst n N M₁ M₁' → subst n N M₂ M₂' → subst n N (app M₁ M₂) (app M₁' M₂');