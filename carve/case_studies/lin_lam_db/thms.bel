%------------------------------------------------------%
% Type preservation for linear λ-calculus
%------------------------------------------------------%

rec tps : [ ⊢ step M M'] → [ ⊢ oft Δ M S] → [ ⊢ oft Δ M' S] =
  fn st, d ⇒ case st of
  | [ ⊢ s/app1 ST1] ⇒
    let [ ⊢ oft/app OFT1 OFT2 MG1] = d in
    let [ ⊢ OFT1'] = tps [ ⊢ ST1] [ ⊢ OFT1] in
    [ ⊢ oft/app OFT1' OFT2 MG1]
  | [ ⊢ s/app2 ST1] ⇒
    let [ ⊢ oft/app OFT1 OFT2 MG1] = d in
    let [ ⊢ OFT2'] = tps [ ⊢ ST1] [ ⊢ OFT2] in
    [ ⊢ oft/app OFT1 OFT2' MG1]
  | [ ⊢ s/lam ST1] ⇒
    let [ ⊢ oft/lam OFT1] = d in
    let [ ⊢ OFT1'] = tps [ ⊢ ST1] [ ⊢ OFT1] in
    [ ⊢ oft/lam OFT1']
  %{
  | [ ⊢ s/red SHu1 SUB1 SHd1] ⇒
    let [ ⊢ oft/app OFT1 OFT2 MG1] = d in
    %-------------------------------------
    let [ ⊢ OFT1]:[ ⊢ oft Δ₁ (lam M) (lolli T S)] = [ ⊢ OFT1] in
    let [ ⊢ SHu1]:[ ⊢ sh_up N zero N'] = [ ⊢ SHu1] in
    let [ ⊢ SUB1]:[ ⊢ subst zero N' M M'] = [ ⊢ SUB1] in
    let [ ⊢ SHd1]:[ ⊢ sh_d M' zero M''] = [ ⊢ SHd1] in
    let [ ⊢ MG1]:[ ⊢ merge Δ₁ Δ₂ Δ] = [ ⊢ MG1] in
    %-------------------------------------
    ?
  }%
  ;