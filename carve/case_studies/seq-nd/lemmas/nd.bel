%======================================================%
% Lemmas (linear natural deduction calculus)
%======================================================%

%------------------------------------------------------%
% Structural properties of typing judgment
%------------------------------------------------------%

% 'Prune' LF context to remove dependencies

inductive PruneChk : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) {CH:[Œ®,x:obj ‚ä¢ chk Œî[..] M C[]]} ctype =
  Prune-Chk : [Œ® ‚ä¢ chk Œî M C[]]
  ‚Üí {CH:[Œ®,x:obj ‚ä¢ chk Œî[..] M[..] C[]]} PruneChk [Œ®,x:obj ‚ä¢ CH];

inductive PruneSyn : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) {SY:[Œ®,x:obj ‚ä¢ syn Œî[..] M C[]]} ctype =
  Prune-Syn : [Œ® ‚ä¢ syn Œî M C[]]
  ‚Üí {SY:[Œ®,x:obj ‚ä¢ syn Œî[..] M[..] C[]]} PruneSyn [Œ®,x:obj ‚ä¢ SY];

rec prune_chk : {CH:[Œ®,x:obj ‚ä¢ chk Œî[..] M C[]]} PruneChk [Œ®,x:obj ‚ä¢ CH] =
  mlam CH ‚áí case [_,x:obj ‚ä¢ CH] of
  | [_,x:obj ‚ä¢ conv SY1] ‚áí
    let Prune-Syn [_ ‚ä¢ SY2] [_,x:obj ‚ä¢ _] = prune_syn [_,x:obj ‚ä¢ SY1] in
    Prune-Chk [_ ‚ä¢ conv SY2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ I‚ë† EXH1] ‚áí
    let [_ ‚ä¢ EXH2] = prune_exh [_,x:obj ‚ä¢ EXH1] in
    Prune-Chk [_ ‚ä¢ I‚ë† EXH2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ E‚ë† SY1 CH1 M1] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let Prune-Syn [_ ‚ä¢ SY2] [_,x:obj ‚ä¢ _] = prune_syn [_,x:obj ‚ä¢ SY1] in
    let Prune-Chk [_ ‚ä¢ CH2] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH1] in
    Prune-Chk [_ ‚ä¢ E‚ë† SY2 CH2 M2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ I‚äó CH1 CH2 M1] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let Prune-Chk [_ ‚ä¢ CH3] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH1] in
    let Prune-Chk [_ ‚ä¢ CH4] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH2] in
    Prune-Chk [_ ‚ä¢ I‚äó CH3 CH4 M2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ E‚äó SY1 (\y.\z.CH1) M1] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let Prune-Syn [_ ‚ä¢ SY2] [_,x:obj ‚ä¢ _] = prune_syn [_,x:obj ‚ä¢ SY1] in
    let Prune-Chk [_,y:obj,z:obj ‚ä¢ CH2] [_,y:obj,z:obj,x:obj ‚ä¢ _] = prune_chk [_,y:obj,z:obj,x:obj ‚ä¢ CH1[..,x,y,z]] in
    Prune-Chk [_ ‚ä¢ E‚äó SY2 (\y.\z.CH2) M2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ I-o \y.CH1] ‚áí
    let Prune-Chk [_,y:obj ‚ä¢ CH2] [_,y:obj,x:obj ‚ä¢ _] = prune_chk [_,y:obj,x:obj ‚ä¢ CH1[..,x,y]] in
    Prune-Chk [_ ‚ä¢ I-o \y.CH2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ I& CH1 CH2] ‚áí
    let Prune-Chk [_ ‚ä¢ CH3] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH1] in
    let Prune-Chk [_ ‚ä¢ CH4] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH2] in
    Prune-Chk [_ ‚ä¢ I& CH3 CH4] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ I‚äï1 CH1] ‚áí
    let Prune-Chk [_ ‚ä¢ CH2] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH1] in
    Prune-Chk [_ ‚ä¢ I‚äï1 CH2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ I‚äï2 CH1] ‚áí
    let Prune-Chk [_ ‚ä¢ CH2] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH1] in
    Prune-Chk [_ ‚ä¢ I‚äï2 CH2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ E‚äï SY1 (\y.CH1) (\y.CH2) M1] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let Prune-Syn [_ ‚ä¢ SY2] [_,x:obj ‚ä¢ _] = prune_syn [_,x:obj ‚ä¢ SY1] in
    let Prune-Chk [_,y:obj ‚ä¢ CH1'] [_,y:obj,x:obj ‚ä¢ _] = prune_chk [_,y:obj,x:obj ‚ä¢ CH1[..,x,y]] in
    let Prune-Chk [_,y:obj ‚ä¢ CH2'] [_,y:obj,x:obj ‚ä¢ _] = prune_chk [_,y:obj,x:obj ‚ä¢ CH2[..,x,y]] in
    Prune-Chk [_ ‚ä¢ E‚äï SY2 (\y.CH1') (\y.CH2') M2] [_,x:obj ‚ä¢ _]

and rec prune_syn : {SY:[Œ®,x:obj ‚ä¢ syn Œî[..] M C[]]} PruneSyn [Œ®,x:obj ‚ä¢ SY] =
  mlam SY ‚áí
  case [_,x:obj ‚ä¢ SY] of
  | [_,x:obj ‚ä¢ coe CH1] ‚áí
    let Prune-Chk [_ ‚ä¢ CH2] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH1] in
    Prune-Syn [_ ‚ä¢ coe CH2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ init UPD1 EXH1] ‚áí
    let Prune-Upd [_ ‚ä¢ UPD2] [_,x:obj ‚ä¢ _] = prune_upd [_,x:obj ‚ä¢ UPD1] in
    let [_ ‚ä¢ EXH2] = prune_exh [_,x:obj ‚ä¢ EXH1] in
    Prune-Syn [_ ‚ä¢ init UPD2 EXH2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ E-o SY1 CH1 M1] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let Prune-Syn [_ ‚ä¢ SY2] [_,x:obj ‚ä¢ _] = prune_syn [_,x:obj ‚ä¢ SY1] in
    let Prune-Chk [_ ‚ä¢ CH2] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH1] in
    Prune-Syn [_ ‚ä¢ E-o SY2 CH2 M2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ E&1 SY1] ‚áí
    let Prune-Syn [_ ‚ä¢ SY2] [_,x:obj ‚ä¢ _] = prune_syn [_,x:obj ‚ä¢ SY1] in
    Prune-Syn [_ ‚ä¢ E&1 SY2] [_,x:obj ‚ä¢ _]
  | [_,x:obj ‚ä¢ E&2 SY1] ‚áí
    let Prune-Syn [_ ‚ä¢ SY2] [_,x:obj ‚ä¢ _] = prune_syn [_,x:obj ‚ä¢ SY1] in
    Prune-Syn [_ ‚ä¢ E&2 SY2] [_,x:obj ‚ä¢ _]
  ;

% Exchange lemmas:
% (1) If Œî ‚ä¢ e ‚ü∏ A and Œî[(n, x) ‚Üî (m, y)] = Œî', then Œî' ‚ä¢ e ‚ü∏ A
% (1) If Œî ‚ä¢ e ‚üπ A and Œî[(n, x) ‚Üî (m, y)] = Œî', then Œî' ‚ä¢ e ‚üπ A
% (Plus two corollaries as helper lemmas for permuting the topmost elements of a context)

rec chk_exch : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ chk Œî M C] ‚Üí [Œ® ‚ä¢ exch Œî n X m Y Œî'] ‚Üí [Œ® ‚ä¢ chk Œî' M C] =
  / total 1 /
  fn ch1, ex1 ‚áí
  let [_ ‚ä¢ exch/u NEQ[] EX1 EX2] = ex1 in
  case ch1 of
  | [_ ‚ä¢ conv SY1] ‚áí let [_ ‚ä¢ SY2] = syn_exch [_ ‚ä¢ SY1] ex1 in [_ ‚ä¢ conv SY2]
  | [_ ‚ä¢ I‚ë† EXH1] ‚áí let [_ ‚ä¢ EXH2] = exch_exh [_ ‚ä¢ EXH1] ex1 in [_ ‚ä¢ I‚ë† EXH2]
  | [_ ‚ä¢ E‚ë† SY1 CH1 M1] ‚áí
    let [_ ‚ä¢ exch-mg EX1a EX2a EX1b EX2b _ M2 _ _ _ _ _] = exch_merge [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ M1] in
    let [_ ‚ä¢ SY2] = syn_exch [_ ‚ä¢ SY1] [_ ‚ä¢ exch/u NEQ[] EX1a EX2a] in
    let [_ ‚ä¢ CH2] = chk_exch [_ ‚ä¢ CH1] [_ ‚ä¢ exch/u NEQ[] EX1b EX2b] in
    [_ ‚ä¢ E‚ë† SY2 CH2 M2]
  | [_ ‚ä¢ I‚äó CH1a CH1b M1] ‚áí
    let [_ ‚ä¢ exch-mg EX1a EX2a EX1b EX2b _ M2 _ _ _ _ _] = exch_merge [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ M1] in
    let [_ ‚ä¢ CH2a] = chk_exch [_ ‚ä¢ CH1a] [_ ‚ä¢ exch/u NEQ[] EX1a EX2a] in
    let [_ ‚ä¢ CH2b] = chk_exch [_ ‚ä¢ CH1b] [_ ‚ä¢ exch/u NEQ[] EX1b EX2b] in
    [_ ‚ä¢ I‚äó CH2a CH2b M2]
  | [_ ‚ä¢ E‚äó SY1 (\x.\y.CH1) M1] ‚áí
    let [_ ‚ä¢ exch-mg EX1a EX2a EX1b EX2b _ M2 _ _ _ _ _] = exch_merge [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ M1] in
    let [_ ‚ä¢ SY2] = syn_exch [_ ‚ä¢ SY1] [_ ‚ä¢ exch/u NEQ[] EX1a EX2a] in
    let [_,x:obj,y:obj ‚ä¢ CH2] = chk_exch [_,x:obj,y:obj ‚ä¢ CH1]
      [_,x:obj,y:obj ‚ä¢ exch/u NEQ[] (upd/n (upd/n EX1b[..])) (upd/n (upd/n EX2b[..]))] in
    [_ ‚ä¢ E‚äó SY2 (\x.\y.CH2) M2]
  | [_ ‚ä¢ I-o \x.CH1] ‚áí
    let [_,x:obj ‚ä¢ CH2] = chk_exch [_,x:obj ‚ä¢ CH1] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n EX1[..]) (upd/n EX2[..])] in
    [_ ‚ä¢ I-o \x.CH2]
  | [_ ‚ä¢ I& CH1a CH1b] ‚áí
    let [_ ‚ä¢ CH2a] = chk_exch [_ ‚ä¢ CH1a] ex1 in
    let [_ ‚ä¢ CH2b] = chk_exch [_ ‚ä¢ CH1b] ex1 in
    [_ ‚ä¢ I& CH2a CH2b]
  | [_ ‚ä¢ I‚äï1 CH1] ‚áí let [_ ‚ä¢ CH2] = chk_exch [_ ‚ä¢ CH1] ex1 in [_ ‚ä¢ I‚äï1 CH2]
  | [_ ‚ä¢ I‚äï2 CH1] ‚áí let [_ ‚ä¢ CH2] = chk_exch [_ ‚ä¢ CH1] ex1 in [_ ‚ä¢ I‚äï2 CH2]
  | [_ ‚ä¢ E‚äï SY1 (\x.CH1a) (\x.CH1b) M1] ‚áí
    let [_ ‚ä¢ exch-mg EX1a EX2a EX1b EX2b _ M2 _ _ _ _ _] = exch_merge [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ M1] in
    let [_ ‚ä¢ SY2] = syn_exch [_ ‚ä¢ SY1] [_ ‚ä¢ exch/u NEQ[] EX1a EX2a] in
    let [_,x:obj ‚ä¢ CH2a] = chk_exch [_,x:obj ‚ä¢ CH1a] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n EX1b[..]) (upd/n EX2b[..])] in
    let [_,x:obj ‚ä¢ CH2b] = chk_exch [_,x:obj ‚ä¢ CH1b] [_,x:obj ‚ä¢ exch/u NEQ[] (upd/n EX1b[..]) (upd/n EX2b[..])] in
    [_ ‚ä¢ E‚äï SY2 (\x.CH2a) (\x.CH2b) M2]

and rec syn_exch : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ syn Œî M C] ‚Üí [Œ® ‚ä¢ exch Œî n X m Y Œî'] ‚Üí [Œ® ‚ä¢ syn Œî' M C] =
  / total 1 /
  fn s1, ex1 ‚áí
  let [_ ‚ä¢ exch/u NEQ[] EX1 EX2] = ex1 in
  case s1 of
  | [_ ‚ä¢ coe CH1] ‚áí let [_ ‚ä¢ CH2] = chk_exch [_ ‚ä¢ CH1] ex1 in [_ ‚ä¢ coe CH2]
  | [_ ‚ä¢ init UPD1 EXH1] ‚áí
    let [_ ‚ä¢ exch-e EX1' EX2' UPD2 _ _ _ _ _] = exch_upd [ ‚ä¢ NEQ] [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ UPD1] in
    let [_ ‚ä¢ EXH2] = exch_exh [_ ‚ä¢ EXH1] [_ ‚ä¢ exch/u NEQ[] EX1' EX2'] in
    [_ ‚ä¢ init UPD2 EXH2]
  | [_ ‚ä¢ E-o SY1 CH1 M1] ‚áí
    let [_ ‚ä¢ exch-mg EX1a EX2a EX1b EX2b _ M2 _ _ _ _ _] = exch_merge [_ ‚ä¢ EX1] [_ ‚ä¢ EX2] [_ ‚ä¢ M1] in
    let [_ ‚ä¢ SY2] = syn_exch [_ ‚ä¢ SY1] [_ ‚ä¢ exch/u NEQ[] EX1a EX2a] in
    let [_ ‚ä¢ CH2] = chk_exch [_ ‚ä¢ CH1] [_ ‚ä¢ exch/u NEQ[] EX1b EX2b] in
    [_ ‚ä¢ E-o SY2 CH2 M2]
  | [_ ‚ä¢ E&1 SY1] ‚áí let [_ ‚ä¢ SY2] = syn_exch [_ ‚ä¢ SY1] ex1 in [_ ‚ä¢ E&1 SY2]
  | [_ ‚ä¢ E&2 SY1] ‚áí let [_ ‚ä¢ SY2] = syn_exch [_ ‚ä¢ SY1] ex1 in [_ ‚ä¢ E&2 SY2]
  ;

rec chk_exch_top : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]])
[Œ® ‚ä¢ chk (cons (cons Œî X A[] Œ±[]) Y B[] Œ≤[]) M C] ‚Üí [Œ® ‚ä¢ chk (cons (cons Œî Y B[] Œ≤[]) X A[] Œ±[]) M C] =
  / total /
  fn ch1 ‚áí chk_exch ch1 (exch_top [_ ‚ä¢ _] [_ ‚ä¢ _] [ ‚ä¢ _] [ ‚ä¢ _] [_ ‚ä¢ _] [ ‚ä¢ _] [ ‚ä¢ _])
  ;

rec chk_exch_top2 : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]])
[Œ® ‚ä¢ chk (cons (cons (cons Œî X A Œ±) Y B Œ≤) Z C Œ≥) M D] ‚Üí [Œ® ‚ä¢ chk (cons (cons (cons Œî Y B Œ≤) Z C Œ≥) X A Œ±) M D] =
  / total /
  fn sq1 ‚áí
  let [_ ‚ä¢ _]:[_ ‚ä¢ chk (cons (cons (cons Œî X A[] Œ±[]) Y B[] Œ≤[]) _ _ _) _ _] = sq1 in
  let [_,x:obj,y:obj ‚ä¢ exch/u NEQ[] EX1 EX2] = exch_top [_ ‚ä¢ Œî] [_ ‚ä¢ X] [ ‚ä¢ A] [ ‚ä¢ Œ±] [_ ‚ä¢ Y] [ ‚ä¢ B] [ ‚ä¢ Œ≤] in
  chk_exch_top (chk_exch sq1 [_ ‚ä¢ exch/u NEQ[] (upd/n EX1) (upd/n EX2)])
  ;

% Strengthening lemmas:
% (1) If (Œî, x :‚Å∞ A) ‚ä¢ e ‚ü∏ A, then Œî ‚ä¢ e ‚ü∏ A
% (2) If (Œî, x :‚Å∞ A) ‚ä¢ e ‚üπ A, then Œî ‚ä¢ e ‚üπ A

rec chk_str : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ chk (cons Œî X A[] ùüò) M C] ‚Üí [Œ® ‚ä¢ chk Œî M C] =
  / total d (chk_str d) /
  fn ch1 ‚áí case ch1 of
  | [_ ‚ä¢ conv SY1] ‚áí let [_ ‚ä¢ SY2] = syn_str [_ ‚ä¢ SY1] in [_ ‚ä¢ conv SY2]
  | [_ ‚ä¢ I‚ë† (exh/c EXH1 _)] ‚áí [_ ‚ä¢ I‚ë† EXH1]
  | [_ ‚ä¢ E‚ë† SY1 CH1 (mg/c M1 ‚Ä¢/us)] ‚áí
    let [_ ‚ä¢ SY2] = syn_str [_ ‚ä¢ SY1] in
    let [_ ‚ä¢ CH2] = chk_str [_ ‚ä¢ CH1] in
    [_ ‚ä¢ E‚ë† SY2 CH2 M1]
  | [_ ‚ä¢ I‚äó CH1a CH1b (mg/c M1 ‚Ä¢/us)] ‚áí
    let [_ ‚ä¢ CH2a] = chk_str [_ ‚ä¢ CH1a] in
    let [_ ‚ä¢ CH2b] = chk_str [_ ‚ä¢ CH1b] in
    [_ ‚ä¢ I‚äó CH2a CH2b M1]
  | [_ ‚ä¢ E‚äó SY1 (\x.\y.CH1) (mg/c M1 ‚Ä¢/us)] ‚áí
    let [_ ‚ä¢ SY2] = syn_str [_ ‚ä¢ SY1] in
    let [_,x:obj,y:obj ‚ä¢ CH2] = chk_str (chk_exch_top2 [_,x:obj,y:obj ‚ä¢ CH1]) in
    [_ ‚ä¢ E‚äó SY2 (\x.\y.CH2) M1]
  | [_ ‚ä¢ I-o \x.CH1] ‚áí
    let [_,x:obj ‚ä¢ CH2] = chk_str (chk_exch_top [_,x:obj ‚ä¢ CH1]) in
    [_ ‚ä¢ I-o \x.CH2]
  | [_ ‚ä¢ I& CH1a CH1b] ‚áí
    let [_ ‚ä¢ CH2a] = chk_str [_ ‚ä¢ CH1a] in
    let [_ ‚ä¢ CH2b] = chk_str [_ ‚ä¢ CH1b] in
    [_ ‚ä¢ I& CH2a CH2b]
  | [_ ‚ä¢ I‚äï1 CH1] ‚áí let [_ ‚ä¢ CH2] = chk_str [_ ‚ä¢ CH1] in [_ ‚ä¢ I‚äï1 CH2]
  | [_ ‚ä¢ I‚äï2 CH1] ‚áí let [_ ‚ä¢ CH2] = chk_str [_ ‚ä¢ CH1] in [_ ‚ä¢ I‚äï2 CH2]
  | [_ ‚ä¢ E‚äï SY1 (\x.CH1a) (\x.CH1b) (mg/c M1 ‚Ä¢/us)] ‚áí
    let [_ ‚ä¢ SY2] = syn_str [_ ‚ä¢ SY1] in
    let [_,x:obj ‚ä¢ CH2a] = chk_str (chk_exch_top [_,x:obj ‚ä¢ CH1a]) in
    let [_,x:obj ‚ä¢ CH2b] = chk_str (chk_exch_top [_,x:obj ‚ä¢ CH1b]) in
    [_ ‚ä¢ E‚äï SY2 (\x.CH2a) (\x.CH2b) M1]

and rec syn_str : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ syn (cons Œî X A[] ùüò) M C] ‚Üí [Œ® ‚ä¢ syn Œî M C] =
  / total d (syn_str d) /
  fn s1 ‚áí case s1 of
  | [_ ‚ä¢ coe CH1] ‚áí let [_ ‚ä¢ CH2] = chk_str [_ ‚ä¢ CH1] in [_ ‚ä¢ coe CH2]
  | [_ ‚ä¢ init (upd/n UPD1) (exh/c EXH1 _)] ‚áí [_ ‚ä¢ init UPD1 EXH1]
  | [_ ‚ä¢ E-o SY1 CH1 (mg/c M1 ‚Ä¢/us)] ‚áí
    let [_ ‚ä¢ SY2] = syn_str [_ ‚ä¢ SY1] in
    let [_ ‚ä¢ CH2] = chk_str [_ ‚ä¢ CH1] in
    [_ ‚ä¢ E-o SY2 CH2 M1]
  | [_ ‚ä¢ E&1 SY1] ‚áí let [_ ‚ä¢ SY2] = syn_str [_ ‚ä¢ SY1] in [_ ‚ä¢ E&1 SY2]
  | [_ ‚ä¢ E&2 SY1] ‚áí let [_ ‚ä¢ SY2] = syn_str [_ ‚ä¢ SY1] in [_ ‚ä¢ E&2 SY2]
  ;

% Weakening lemmas:
% (1) If Œî ‚ä¢ e ‚ü∏ A, then (Œî, x :‚Å∞ A) ‚ä¢ e ‚ü∏ A for any x, A
% (2) If Œî ‚ä¢ e ‚üπ A, then (Œî, x :‚Å∞ A) ‚ä¢ e ‚üπ A for any x, A

rec chk_weak : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ chk Œî M C]
‚Üí {X:[Œ® ‚ä¢ obj]} {A:[ ‚ä¢ tp]} [Œ® ‚ä¢ chk (cons Œî X A[] ùüò) M C] =
  / total 1 /
  fn ch1 ‚áí mlam X, A ‚áí
  case ch1 of
  | [_ ‚ä¢ conv SY1] ‚áí let [_ ‚ä¢ SY2] = syn_weak [_ ‚ä¢ SY1] [_ ‚ä¢ X] [ ‚ä¢ A] in [_ ‚ä¢ conv SY2]
  | [_ ‚ä¢ I‚ë† EXH1] ‚áí [_ ‚ä¢ I‚ë† (exh/c EXH1 unr/0)]
  | [_ ‚ä¢ E‚ë† SY1 CH1 M1] ‚áí
    let [_ ‚ä¢ SY2] = syn_weak [_ ‚ä¢ SY1] [_ ‚ä¢ X] [ ‚ä¢ A] in
    let [_ ‚ä¢ CH2] = chk_weak [_ ‚ä¢ CH1] [_ ‚ä¢ X] [ ‚ä¢ A] in
    [_ ‚ä¢ E‚ë† SY2 CH2 (mg/c M1 ‚Ä¢/us)]
  | [_ ‚ä¢ I‚äó CH1 CH2 M1] ‚áí
    let [_ ‚ä¢ CH3] = chk_weak [_ ‚ä¢ CH1] [_ ‚ä¢ X] [ ‚ä¢ A] in
    let [_ ‚ä¢ CH4] = chk_weak [_ ‚ä¢ CH2] [_ ‚ä¢ X] [ ‚ä¢ A] in
    [_ ‚ä¢ I‚äó CH3 CH4 (mg/c M1 ‚Ä¢/us)]
  | [_ ‚ä¢ E‚äó SY1 (\x.\y.CH1) M1] ‚áí
    let [_ ‚ä¢ SY2] = syn_weak [_ ‚ä¢ SY1] [_ ‚ä¢ X] [ ‚ä¢ A] in
    let [_,x:obj,y:obj ‚ä¢ CH1'']:[_,x:obj,y:obj ‚ä¢ chk (cons (cons (cons Œî‚ÇÇ[..] _ B1[] _) _ _ _) _ _ _) _ _] =
      chk_exch_top (chk_weak [_,x:obj,y:obj ‚ä¢ CH1] [_,x:obj,y:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    let [_,x:obj ‚ä¢ exch/u NEQ[] EX1 EX2] = exch_top [_,x:obj ‚ä¢ Œî‚ÇÇ[..]] [_,x:obj ‚ä¢ x] [ ‚ä¢ B1] [ ‚ä¢ ùüô] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A] [ ‚ä¢ ùüò] in
    let [_,x:obj,y:obj ‚ä¢ CH1'] = chk_exch [_,x:obj,y:obj ‚ä¢ CH1''] [_,x:obj,y:obj ‚ä¢ exch/u NEQ[] (upd/n EX1[..,x]) (upd/n EX2[..,x])] in
    [_ ‚ä¢ E‚äó SY2 (\x.\y.CH1') (mg/c M1 ‚Ä¢/us)]
  | [_ ‚ä¢ I-o \x.CH1] ‚áí
    let [_,x:obj ‚ä¢ CH2] = chk_exch_top (chk_weak [_,x:obj ‚ä¢ CH1] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    [_ ‚ä¢ I-o \x.CH2]
  | [_ ‚ä¢ I& CH1 CH2] ‚áí
    let [_ ‚ä¢ CH3] = chk_weak [_ ‚ä¢ CH1] [_ ‚ä¢ X] [ ‚ä¢ A] in
    let [_ ‚ä¢ CH4] = chk_weak [_ ‚ä¢ CH2] [_ ‚ä¢ X] [ ‚ä¢ A] in
    [_ ‚ä¢ I& CH3 CH4]
  | [_ ‚ä¢ I‚äï1 CH1] ‚áí let [_ ‚ä¢ CH2] = chk_weak [_ ‚ä¢ CH1] [_ ‚ä¢ X] [ ‚ä¢ A] in [_ ‚ä¢ I‚äï1 CH2]
  | [_ ‚ä¢ I‚äï2 CH1] ‚áí let [_ ‚ä¢ CH2] = chk_weak [_ ‚ä¢ CH1] [_ ‚ä¢ X] [ ‚ä¢ A] in [_ ‚ä¢ I‚äï2 CH2]
  | [_ ‚ä¢ E‚äï SY1 (\x.CH1) (\x.CH2) M1] ‚áí
    let [_ ‚ä¢ SY2] = syn_weak [_ ‚ä¢ SY1] [_ ‚ä¢ X] [ ‚ä¢ A] in
    let [_,x:obj ‚ä¢ CH1'] = chk_exch_top (chk_weak [_,x:obj ‚ä¢ CH1] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    let [_,x:obj ‚ä¢ CH2'] = chk_exch_top (chk_weak [_,x:obj ‚ä¢ CH2] [_,x:obj ‚ä¢ X[..]] [ ‚ä¢ A]) in
    [_ ‚ä¢ E‚äï SY2 (\x.CH1') (\x.CH2') (mg/c M1 ‚Ä¢/us)]

and rec syn_weak : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]]) [Œ® ‚ä¢ syn Œî M C]
‚Üí {X:[Œ® ‚ä¢ obj]} {A:[ ‚ä¢ tp]} [Œ® ‚ä¢ syn (cons Œî X A[] ùüò) M C] =
  / total 1 /
  fn sy ‚áí mlam X, A ‚áí
  case sy of
  | [_ ‚ä¢ coe CH1] ‚áí let [_ ‚ä¢ CH2] = chk_weak [_ ‚ä¢ CH1] [_ ‚ä¢ X] [ ‚ä¢ A] in [_ ‚ä¢ coe CH2]
  | [_ ‚ä¢ init UPD1 EXH1] ‚áí [_ ‚ä¢ init (upd/n UPD1) (exh/c EXH1 unr/0)]
  | [_ ‚ä¢ E-o SY1 CH1 M1] ‚áí
    let [_ ‚ä¢ SY2] = syn_weak [_ ‚ä¢ SY1] [_ ‚ä¢ X] [ ‚ä¢ A] in
    let [_ ‚ä¢ CH2] = chk_weak [_ ‚ä¢ CH1] [_ ‚ä¢ X] [ ‚ä¢ A] in
    [_ ‚ä¢ E-o SY2 CH2 (mg/c M1 ‚Ä¢/us)]
  | [_ ‚ä¢ E&1 SY1] ‚áí let [_ ‚ä¢ SY2] = syn_weak [_ ‚ä¢ SY1] [_ ‚ä¢ X] [ ‚ä¢ A] in [_ ‚ä¢ E&1 SY2]
  | [_ ‚ä¢ E&2 SY1] ‚áí let [_ ‚ä¢ SY2] = syn_weak [_ ‚ä¢ SY1] [_ ‚ä¢ X] [ ‚ä¢ A] in [_ ‚ä¢ E&2 SY2]
  ;

%------------------------------------------------------%
% Main lemmas
%------------------------------------------------------%

% Substitution lemma:
% (1) If (Œî‚ÇÅ, x :¬π A) ‚ä¢ e ‚ü∏ C, Œî‚ÇÇ ‚ä¢ s ‚üπ A, and Œî‚ÇÅ ‚ãà Œî‚ÇÇ = Œî, then Œî ‚ä¢ e[s/x] ‚ü∏ C
% (2) If (Œî‚ÇÅ, x :¬π A) ‚ä¢ e ‚üπ C, Œî‚ÇÇ ‚ä¢ s ‚üπ A, and Œî‚ÇÅ ‚ãà Œî‚ÇÇ = Œî, then Œî ‚ä¢ e[s/x] ‚üπ C

rec subst_chk : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]])
[Œ®,x:obj ‚ä¢ chk (cons Œî‚ÇÅ[..] x A[] ùüô) e C[]] ‚Üí [Œ® ‚ä¢ syn Œî‚ÇÇ s A[]] ‚Üí [Œ® ‚ä¢ merge Œî‚ÇÅ Œî‚ÇÇ Œî] ‚Üí [Œ® ‚ä¢ chk Œî e[..,s] C[]] =
  fn ch1, sy2, mg ‚áí
  let ([_ ‚ä¢ SY],[_ ‚ä¢ M]) = (sy2,mg) in
  case ch1 of
  | [_,x:obj ‚ä¢ conv SY1] ‚áí let [_ ‚ä¢ SY2] = subst_syn [_,x:obj ‚ä¢ SY1] sy2 mg in [_ ‚ä¢ conv SY2]
  | [_,x:obj ‚ä¢ I‚ë† E] ‚áí
      let [_,x:obj ‚ä¢ exh/c _ T[]] = [_,x:obj ‚ä¢ E] in
      impossible [ ‚ä¢ T]
  | [_,x:obj ‚ä¢ E‚ë† SY1 CH1 (mg/c M1 MLT[])] ‚áí
    %{
    In the E‚ë† case, we get
      Œî‚ÇÅ, x :Œ±‚ÇÅ A ‚ä¢ s' ‚áí ‚ë†
      Œî‚ÇÇ, x :Œ±‚ÇÇ A ‚ä¢ e ‚áê C
      (Œî‚ÇÅ, x :Œ±‚ÇÅ A) ‚ãà (Œî‚ÇÇ, x :Œ±‚ÇÇ A) = (Œî‚ÇÅ‚ÇÇ, x :¬π A)

    By assumption we also have
      Œî‚ÇÉ ‚ä¢ s ‚áí A
      Œî‚ÇÅ‚ÇÇ ‚ãà Œî‚ÇÉ = Œî

    - Œî‚ÇÅ,Œî‚ÇÇ don't depend on x by `prune_merge`
    - Œ±‚ÇÅ ‚àô Œ±‚ÇÇ = ùüô by definition, i.e. x : A appears with multiplicity ùüô in either Œî‚ÇÅ or Œî‚ÇÇ,
    and with multiplicity ùüò in the other.
    Consider the case where Œ±‚ÇÅ = ùüò and Œ±‚ÇÇ = ùüô (the other case is similar)

    - Œî‚ÇÅ ‚ä¢ s' ‚áí ‚ë† by `syn_str`
    - s' doesn't depend on x by `prune_syn` (using fact that Œî‚ÇÅ doesn't depend on x)
    - Œî‚ÇÇ ‚ãà Œî‚ÇÉ = Œî‚ÇÇ‚ÇÉ and Œî‚ÇÅ ‚ãà Œî‚ÇÇ‚ÇÉ = Œî for some Œî‚ÇÇ‚ÇÉ by the associativity of ‚ãà
    - e[..,s] ‚áê C by the induction hypothesis using
        Œî‚ÇÇ, x :¬π A ‚ä¢ e ‚áê C
        Œî‚ÇÉ ‚ä¢ s ‚áí A
        Œî‚ÇÇ ‚ãà Œî‚ÇÉ = Œî‚ÇÇ‚ÇÉ
    Finally:
    - Œî ‚ä¢ (elim-unit s' e[..,s]) ‚áê C by E‚ë† with
        Œî‚ÇÅ ‚ä¢ s' ‚áí ‚ë†,
        Œî‚ÇÇ‚ÇÉ ‚ä¢ e[..,s] ‚áê C, and
        Œî‚ÇÅ ‚ãà Œî‚ÇÇ‚ÇÉ = Œî
    }%
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    (case [ ‚ä¢ MLT] of
    | [ ‚ä¢ ‚Ä¢/a1] ‚áí
      let [_,x:obj ‚ä¢ CH2'] = chk_str [_ ‚ä¢ CH1] in
      let Prune-Chk [_ ‚ä¢ CH2] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH2'] in
      let [_ ‚ä¢ mg-assoc2 M3 M4 _ _] = merge_assoc_2 [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let [_ ‚ä¢ CH3] = subst_syn [_,x:obj ‚ä¢ SY1] sy2 [_ ‚ä¢ M3] in
      [_ ‚ä¢ E‚ë† CH3 CH2 M4]
    | [ ‚ä¢ ‚Ä¢/a2] ‚áí
      let [_,x:obj ‚ä¢ SY2'] = syn_str [_ ‚ä¢ SY1] in
      let Prune-Syn [_ ‚ä¢ SY2] [_,x:obj ‚ä¢ _] = prune_syn [_,x:obj ‚ä¢ SY2'] in
      let [_ ‚ä¢ mg-assoc M3 M4 _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let [_ ‚ä¢ CH2] = subst_chk [_,x:obj ‚ä¢ CH1] sy2 [_ ‚ä¢ M3] in
      [_ ‚ä¢ E‚ë† SY2 CH2 M4]
    )
  | [_,x:obj ‚ä¢ I‚äó CH1a CH1b (mg/c M1 MLT[])] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    (case [ ‚ä¢ MLT] of
    | [ ‚ä¢ ‚Ä¢/a1] ‚áí
      let [_,x:obj ‚ä¢ CH2b'] = chk_str [_ ‚ä¢ CH1b] in
      let Prune-Chk [_ ‚ä¢ CH2b] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH2b'] in
      let [_ ‚ä¢ mg-assoc2 M3 M4 _ _] = merge_assoc_2 [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let [_ ‚ä¢ CH3] = subst_chk [_,x:obj ‚ä¢ CH1a] sy2 [_ ‚ä¢ M3] in
      [_ ‚ä¢ I‚äó CH3 CH2b M4]
    | [ ‚ä¢ ‚Ä¢/a2] ‚áí
      let [_,x:obj ‚ä¢ CH2a'] = chk_str [_ ‚ä¢ CH1a] in
      let Prune-Chk [_ ‚ä¢ CH2a] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH2a'] in
      let [_ ‚ä¢ mg-assoc M3 M4 _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let [_ ‚ä¢ CH2b] = subst_chk [_,x:obj ‚ä¢ CH1b] sy2 [_ ‚ä¢ M3] in
      [_ ‚ä¢ I‚äó CH2a CH2b M4]
    )
  | [_,x:obj ‚ä¢ E‚äó SY1 (\y.\z.CH1) (mg/c M1 MLT[])] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    let CH1' = chk_exch_top2 [_,y:obj,z:obj,x:obj ‚ä¢ CH1[..,x,y,z]] in
    (case [ ‚ä¢ MLT] of
    | [ ‚ä¢ ‚Ä¢/a1] ‚áí
      let [_ ‚ä¢ mg-assoc2 M3 M4 _ _] = merge_assoc_2 [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let [_ ‚ä¢ SY2] = subst_syn [_,x:obj ‚ä¢ SY1] sy2 [_ ‚ä¢ M3] in
      let [_,x:obj,y:obj,z:obj ‚ä¢ CH2'] = chk_str CH1' in
      let Prune-Chk [_,x:obj,y:obj ‚ä¢ CH2] [_,x:obj,y:obj,z:obj ‚ä¢ _] = prune_chk [_,y:obj,x:obj,z:obj ‚ä¢ CH2'] in
      [_ ‚ä¢ E‚äó SY2 (\x.\y.CH2) M4]
    | [ ‚ä¢ ‚Ä¢/a2] ‚áí
      let [_ ‚ä¢ mg-assoc M3 M4 _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let [_,x:obj ‚ä¢ SY2'] = syn_str [_ ‚ä¢ SY1] in
      let Prune-Syn [_ ‚ä¢ SY2] [_,x:obj ‚ä¢ _] = prune_syn [_,x:obj ‚ä¢ SY2'] in
      let [_,x:obj,y:obj ‚ä¢ CH2] = subst_chk CH1'
        (syn_weak ((syn_weak ([_,x:obj,y:obj ‚ä¢ SY[..]]) [_,x:obj,y:obj ‚ä¢ _] [ ‚ä¢ _])) [_,x:obj,y:obj ‚ä¢ _] [ ‚ä¢ _])
        [_,x:obj,y:obj ‚ä¢ mg/c (mg/c M3[..] ‚Ä¢/a1) ‚Ä¢/a1] in
      [_ ‚ä¢ E‚äó SY2 (\y.\z.CH2) M4]
    )
  | [_,x:obj ‚ä¢ I-o \y.CH1] ‚áí
    let [_,x:obj ‚ä¢ CH3] = subst_chk (chk_exch_top [_,y:obj,x:obj ‚ä¢ CH1[..,x,y]])
      (syn_weak [_,x:obj ‚ä¢ SY[..]] [_,x:obj ‚ä¢ x] [ ‚ä¢ _]) [_,x:obj ‚ä¢ mg/c M[..] ‚Ä¢/a1] in
    [_ ‚ä¢ I-o \x.CH3]
  | [_,x:obj ‚ä¢ I& CH1a CH1b] ‚áí
    let [_ ‚ä¢ CH3] = subst_chk [_,x:obj ‚ä¢ CH1a] sy2 mg in
    let [_ ‚ä¢ CH4] = subst_chk [_,x:obj ‚ä¢ CH1b] sy2 mg in
    [_ ‚ä¢ I& CH3 CH4]
  | [_,x:obj ‚ä¢ I‚äï1 CH1] ‚áí
    let [_ ‚ä¢ CH3] = subst_chk [_,x:obj ‚ä¢ CH1] sy2 mg in
    [_ ‚ä¢ I‚äï1 CH3]
  | [_,x:obj ‚ä¢ I‚äï2 CH1] ‚áí
    let [_ ‚ä¢ CH3] = subst_chk [_,x:obj ‚ä¢ CH1] sy2 mg in
    [_ ‚ä¢ I‚äï2 CH3]
  | [_,x:obj ‚ä¢ E‚äï SY1 (\y.CH1a) (\y.CH1b) (mg/c M1 MLT[])] ‚áí
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    (case [ ‚ä¢ MLT] of
    | [ ‚ä¢ ‚Ä¢/a1] ‚áí
      let [_ ‚ä¢ mg-assoc2 M3 M4 _ _] = merge_assoc_2 [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let [_,x:obj,y:obj ‚ä¢ CH2a'] = chk_str (chk_exch_top [_,y:obj,x:obj ‚ä¢ CH1a[..,x,y]]) in
      let [_,x:obj,y:obj ‚ä¢ CH2b'] = chk_str (chk_exch_top [_,y:obj,x:obj ‚ä¢ CH1b[..,x,y]]) in
      let Prune-Chk [_,y:obj ‚ä¢ CH2a] [_,y:obj,x:obj ‚ä¢ _] = prune_chk [_,y:obj,x:obj ‚ä¢ CH2a'] in
      let Prune-Chk [_,y:obj ‚ä¢ CH2b] [_,y:obj,x:obj ‚ä¢ _] = prune_chk [_,y:obj,x:obj ‚ä¢ CH2b'] in
      let [_ ‚ä¢ SY2] = subst_syn [_,x:obj ‚ä¢ SY1] sy2 [_ ‚ä¢ M3] in
      [_ ‚ä¢ E‚äï SY2 (\x.CH2a) (\x.CH2b) M4]
    | [ ‚ä¢ ‚Ä¢/a2] ‚áí
      let [_ ‚ä¢ mg-assoc M3 M4 _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let [_,x:obj ‚ä¢ SY2'] = syn_str [_ ‚ä¢ SY1] in
      let Prune-Syn [_ ‚ä¢ SY2] [_,x:obj ‚ä¢ _] = prune_syn [_,x:obj ‚ä¢ SY2'] in
      let [_,x:obj ‚ä¢ CH3] = subst_chk (chk_exch_top [_,y:obj,x:obj ‚ä¢ CH1a[..,x,y]])
        (syn_weak [_,x:obj ‚ä¢ SY[..]] [_,x:obj ‚ä¢ x] [ ‚ä¢ _]) [_,x:obj ‚ä¢ mg/c M3[..] ‚Ä¢/a1] in
      let [_,x:obj ‚ä¢ CH4] = subst_chk (chk_exch_top [_,y:obj,x:obj ‚ä¢ CH1b[..,x,y]])
        (syn_weak [_,x:obj ‚ä¢ SY[..]] [_,x:obj ‚ä¢ x] [ ‚ä¢ _]) [_,x:obj ‚ä¢ mg/c M3[..] ‚Ä¢/a1] in
      [_ ‚ä¢ E‚äï SY2 (\x.CH3) (\x.CH4) M4]
    )

and rec subst_syn : (Œ®:ctx) (Œî:[Œ® ‚ä¢ lctx N[]])
[Œ®,x:obj ‚ä¢ syn (cons Œî‚ÇÅ[..] x A[] ùüô) e C[]] ‚Üí [Œ® ‚ä¢ syn Œî‚ÇÇ s A[]] ‚Üí [Œ® ‚ä¢ merge Œî‚ÇÅ Œî‚ÇÇ Œî] ‚Üí [Œ® ‚ä¢ syn Œî e[..,s] C[]] =
  fn sy1, sy2, mg ‚áí case sy1 of
  | [_,x:obj ‚ä¢ coe CH1] ‚áí let [_ ‚ä¢ CH2] = subst_chk [_ ‚ä¢ CH1] sy2 mg in [_ ‚ä¢ coe CH2]
  | [_,x:obj ‚ä¢ init U1 E1] ‚áí
    %{
    Here we have
    U1 : [Œ®,x:obj ‚ä¢ upd (cons Œî‚ÇÅ[..] x A[] ùüô) n[] X X A'[] A'[] ùüô ùüò Œî‚ÇÅ']
    E1 : [Œ®,x:obj ‚ä¢ exh Œî‚ÇÅ']

    It must be the case that x = X; otherwise, (x :¬π A) ‚àà Œî‚ÇÅ',
    contradicting the fact that Œî‚ÇÅ' is exhausted.
    Thus A = A', Œî‚ÇÅ' = Œî‚ÇÅ, x :‚Å∞ A, and exh(Œî‚ÇÅ)

    Since Œî‚ÇÅ ‚ãà Œî‚ÇÇ = Œî and exh(Œî‚ÇÅ), it follows from merge_id that Œî‚ÇÇ = Œî.
    Therefore Œî ‚ä¢ s ‚üπ A by assumption.
    }%
    (case [_,x:obj ‚ä¢ U1] of
    | [_,x:obj ‚ä¢ upd/t _] ‚áí
      let [_,x:obj ‚ä¢ exh/c E2 _] = [_,x:obj ‚ä¢ E1] in
      let [_ ‚ä¢ cx/refl] = merge_id mg (prune_exh [_,x:obj ‚ä¢ E2]) in
      sy2
    | [_,x:obj ‚ä¢ upd/n _] ‚áí
      let [_,x:obj ‚ä¢ exh/c _ T[]] = [_,x:obj ‚ä¢ E1] in
      impossible [ ‚ä¢ T]
    )
  | [_,x:obj ‚ä¢ E-o SY1 CH1 (mg/c M1 MLT[])] ‚áí
    let [_ ‚ä¢ M] = mg in
    let Prune-Merge [_ ‚ä¢ M2] [_,x:obj ‚ä¢ _] = prune_merge [_,x:obj ‚ä¢ M1] in
    (case [ ‚ä¢ MLT] of
    | [ ‚ä¢ ‚Ä¢/a1] ‚áí
      let [_ ‚ä¢ mg-assoc2 M3 M4 _ _] = merge_assoc_2 [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let [_ ‚ä¢ SY2] = subst_syn [_,x:obj ‚ä¢ SY1] sy2 [_ ‚ä¢ M3] in
      let [_,x:obj ‚ä¢ CH2'] = chk_str [_,x:obj ‚ä¢ CH1] in
      let Prune-Chk [_ ‚ä¢ CH2] [_,x:obj ‚ä¢ _] = prune_chk [_,x:obj ‚ä¢ CH2'] in
      [_ ‚ä¢ E-o SY2 CH2 M4]
    | [ ‚ä¢ ‚Ä¢/a2] ‚áí
      let [_ ‚ä¢ mg-assoc M3 M4 _ _] = merge_assoc [_ ‚ä¢ M] [_ ‚ä¢ M2] in
      let [_,x:obj ‚ä¢ SY2'] = syn_str [_ ‚ä¢ SY1] in
      let Prune-Syn [_ ‚ä¢ SY2] [_,x:obj ‚ä¢ _] = prune_syn [_,x:obj ‚ä¢ SY2'] in
      let [_ ‚ä¢ CH2] = subst_chk [_,x:obj ‚ä¢ CH1] sy2 [_ ‚ä¢ M3] in
      [_ ‚ä¢ E-o SY2 CH2 M4]
    )
  | [_,x:obj ‚ä¢ E&1 SY1] ‚áí let [_ ‚ä¢ SY2] = subst_syn [_,x:obj ‚ä¢ SY1] sy2 mg in [_ ‚ä¢ E&1 SY2]
  | [_,x:obj ‚ä¢ E&2 SY1] ‚áí let [_ ‚ä¢ SY2] = subst_syn [_,x:obj ‚ä¢ SY1] sy2 mg in [_ ‚ä¢ E&2 SY2]
  ;