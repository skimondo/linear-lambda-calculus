%======================================================%
% Properties of simultaneous substitution
%======================================================%

% If ฮ โข ฯ : ฮ and exh(ฮ), then exh(ฮ)

rec subst_exh : (ฮจ:ctx) (ฮ:[ฮจ โข lctx N[]]) (ฮ:[ฮจ โข lctx M[]]) [ฮจ โข wf_subst ฮ ฯ ฮ] โ [ฮจ โข exh ฮ] โ [ฮจ โข exh ฮ] =
  / total 1 /
  fn SUB, EXH โ case SUB of
  | [_ โข wf_subst_empty EXH1] โ [_ โข EXH1]
  | [_ โข wf_subst_cons1 _ _ _] โ 
    let [_ โข exh/c _ T[]] = EXH in
    impossible [ โข T]
  | [_ โข wf_subst_cons0 SUB1 _ _] โ
  	let [_ โข exh/c EXH1 _] = EXH in
  	subst_exh [_ โข SUB1] [_ โข EXH1]
  ;

% If ฮ โข ฯ : ฮ and ฮโ โ ฮโ = ฮ, then there exist ฮโ,ฮโ such that
% ฮโ โข ฯ : ฮโ, ฮโ โข ฯ : ฮโ, and ฮโ โ ฮโ = ฮ

LF subst-merge : wf_subst _ _ _ โ merge _ _ _ โ type =
  sub-mg : wf_subst ฮโ ฯ ฮโ โ wf_subst ฮโ ฯ ฮโ โ merge ฮโ ฮโ ฮ
  โ {SUB:wf_subst ฮ ฯ ฮ} {M:merge ฮโ ฮโ ฮ} subst-merge SUB M;

rec subst_merge : (ฮจ:ctx) (ฮ:[ฮจ โข lctx N[]]) (ฮ:[ฮจ โข lctx M[]])
{SUB:[ฮจ โข wf_subst ฮ ฯ ฮ]} {M:[ฮจ โข merge ฮโ ฮโ ฮ]} [ฮจ โข subst-merge SUB M] =
  / total 1 /
  mlam SUB, M โ case [_ โข SUB] of
  | [_ โข wf_subst_empty E] โ
    let [_ โข mg/n] = [_ โข M] in
    let [_ โข _]:[_ โข exh ฮ] = [_ โข E] in
    let [_ โข merge-getid M1 _] = merge_getid [_ โข ฮ] in
    let [_ โข cx/refl] = merge_id [_ โข M1] [_ โข E] in
    [_ โข sub-mg (wf_subst_empty E) (wf_subst_empty E) M1 _ _]
  | [_ โข wf_subst_cons1 SUB1 CH1 M1] โ
  	let [_ โข mg/c M' MLT[]] = [_ โข M] in
  	let [_ โข sub-mg SUB2 SUB3 M2 _ _] = subst_merge [_ โข SUB1] [_ โข M'] in
  	(case [ โข MLT] of
  	| [ โข โข/a1] โ
      let [_ โข mg-assoc2 M3 M4 _ _] = merge_assoc_2 [_ โข M1] [_ โข M2] in
      let [_ โข SE] = same_elts_trans (merge_same_elts (merge_comm [_ โข M2])) (merge_same_elts_cor [_ โข M1]) in
      [_ โข sub-mg (wf_subst_cons1 SUB2 CH1 M3) (wf_subst_cons0 SUB3 CH1 SE) M4 _ _]
  	| [ โข โข/a2] โ
      let [_ โข mg-assoc M3 M4 _ _] = merge_assoc [_ โข M1] [_ โข M2] in
      let [_ โข SE] = same_elts_trans (merge_same_elts [_ โข M2]) (merge_same_elts_cor [_ โข M1]) in
      [_ โข sub-mg (wf_subst_cons0 SUB2 CH1 SE) (wf_subst_cons1 SUB3 CH1 M3) M4 _ _]
  	)
  | [_ โข wf_subst_cons0 SUB1 CH1 SE1] โ
  	let [_ โข mg/c M1 โข/us] = [_ โข M] in
    let [_ โข sub-mg SUB2 SUB3 M2 _ _] = subst_merge [_ โข SUB1] [_ โข M1] in
    let [_ โข SE2] = same_elts_trans (merge_same_elts [_ โข M2]) [_ โข SE1] in
    let [_ โข SE3] = same_elts_trans (merge_same_elts (merge_comm [_ โข M2])) [_ โข SE1] in
  	[_ โข sub-mg (wf_subst_cons0 SUB2 CH1 SE2) (wf_subst_cons0 SUB3 CH1 SE3) M2 _ _]
  ;

% If ฮ โข ฯ : ฮ and ฮ[(x :ยน A) โฆ (x :ยน ๐)] = ฮ', then there exist e,ฮโ,ฮโ such that
% ฮโ โข ฯ : ฮ', ฮโ โข e โ A, and ฮโ โ ฮโ = ฮ

LF subst-upd : wf_subst _ _ _ โ upd _ _ _ _ _ _ _ _ _ โ type =
  sub-up : wf_subst ฮโ ฯ ฮ' โ chk ฮโ _ A โ merge ฮโ ฮโ ฮ
  โ {SUB:wf_subst ฮ ฯ ฮ} {U:upd ฮ _ _ _ A A ๐ ๐ ฮ'} subst-upd SUB U;

rec subst_upd : (ฮจ:ctx) (ฮ:[ฮจ โข lctx N[]]) (ฮ:[ฮจ โข lctx M[]])
{SUB:[ฮจ โข wf_subst ฮ ฯ ฮ]} {U:[ฮจ โข upd ฮ n[] X X' A[] A[] ๐ ๐ ฮ']} [ฮจ โข subst-upd SUB U] =
  / total 1 /
  mlam SUB, U โ case [_ โข SUB] of
  | [_ โข wf_subst_empty _] โ impossible [_ โข U]
  | [_ โข wf_subst_cons1 SUB1 CH1 M1] โ
    (case [_ โข U] of
    | [_ โข upd/t _] โ
      let [_ โข SE] = merge_same_elts_cor [_ โข M1] in
      [_ โข sub-up (wf_subst_cons0 SUB1 CH1 SE) CH1 M1 _ _]
    | [_ โข upd/n U1] โ
      let [_ โข sub-up SUB2 CH2 M2 _ _] = subst_upd [_ โข SUB1] [_ โข U1] in
      let [_ โข mg-assoc2 M3 M4 _ _] = merge_assoc_2 [_ โข M1] [_ โข M2] in
      [_ โข sub-up (wf_subst_cons1 SUB2 CH1 M3) CH2 M4 _ _]
    )
  | [_ โข wf_subst_cons0 SUB1 CH1 SE1] โ
  	let [_ โข upd/n U1] = [_ โข U] in
    let [_ โข sub-up SUB2 CH2 M2 _ _] = subst_upd [_ โข SUB1] [_ โข U1] in
    let [_ โข SE2] = same_elts_trans (merge_same_elts [_ โข M2]) [_ โข SE1] in
  	[_ โข sub-up (wf_subst_cons0 SUB2 CH1 SE2) CH2 M2 _ _]
  ;

% If ฮ โข ฯ : ฮ, then (ฮ, x :โฐ A) โข ฯ : ฮ for any x,A

rec subst_weak : (ฮจ:ctx) (ฮ:[ฮจ โข lctx N[]]) (ฮ:[ฮจ โข lctx M[]])
[ฮจ โข wf_subst ฮ ฯ ฮ] โ {X:[ฮจ โข obj]} {A:[ โข tp]} [ฮจ โข wf_subst (cons ฮ X A[] ๐) ฯ ฮ] =
  / total 1 /
  fn SUB โ mlam X, A โ case SUB of
  | [_ โข wf_subst_empty E] โ [_ โข wf_subst_empty (exh/c E unr/0)]
  | [_ โข wf_subst_cons1 SUB1 CH1 M1] โ
    let [_ โข SUB1'] = subst_weak [_ โข SUB1] [_ โข X] [ โข A] in
    let [_ โข CH1'] = chk_weak [_ โข CH1] [_ โข X] [ โข A] in
    [_ โข wf_subst_cons1 SUB1' CH1' (mg/c M1 โข/us)]
  | [_ โข wf_subst_cons0 SUB1 CH1 SE1] โ
    let [_ โข SUB1'] = subst_weak [_ โข SUB1] [_ โข X] [ โข A] in
    let [_ โข CH1'] = chk_weak [_ โข CH1] [_ โข X] [ โข A] in
    [_ โข wf_subst_cons0 SUB1' CH1' (se/c SE1)]
  ;

% If ฮ โข ฯ : ฮ, then (ฮ, x :ฮฑ A) โข (ฯ, x) : (ฮ, x :ฮฑ A) for any x,ฮฑ,A

rec subst_extend : (ฮจ:ctx) (ฮ:[ฮจ โข lctx N[]]) (ฮ:[ฮจ โข lctx M[]])
[ฮจ โข wf_subst ฮ ฯ ฮ] โ {X:[ฮจ โข obj]} {A:[ โข tp]} {ฮฑ:[ โข mult]} [ฮจ โข wf_subst (cons ฮ X A[] ฮฑ[]) (scons ฯ X) (cons ฮ X A[] ฮฑ[])] =
  / total /
  fn SUB โ mlam X, A, ฮฑ โ
  let [_ โข SUB1]:[_ โข wf_subst (cons ฮ _ _ _) _ _] = subst_weak SUB [_ โข X] [ โข A] in
  let [_ โข merge-getid M E] = merge_getid [_ โข ฮ] in
  let [_ โข SE] = merge_same_elts_cor [_ โข M] in
  case [ โข ฮฑ] of
  | [ โข ๐] โ [_ โข wf_subst_cons0 SUB1 (conv (init (upd/t _) (exh/c E unr/0))) (se/c SE)]
  | [ โข ๐] โ [_ โข wf_subst_cons1 SUB1 (conv (init (upd/t _) (exh/c E unr/0))) (mg/c M โข/a2)]
  ;