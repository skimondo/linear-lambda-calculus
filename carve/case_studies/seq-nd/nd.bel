%======================================================%
% Statics of linear natural deduction calculus
%======================================================%

% Bidirectional typing judgments:
% Δ ⊢ e ⟸ A, i.e., e checks against type A under Δ
% Δ ⊢ e ⟹ A, i.e., e synthesizes type A under Δ

LF syn : lctx _ → obj → tp → type =

| coe :
    chk Δ e A
  → syn Δ (coerce e A) A

% Hypotheses

| init :
    upd Δ _ X X A A 𝟙 𝟘 Δ' → exh Δ'
  → syn Δ X A

% Multiplicatives

| E-o :
    syn Δ₁ s (A -o B)
  → chk Δ₂ e A
  → merge Δ₁ Δ₂ Δ
  → syn Δ (app s e) B

% Additives

| E&1 :
    syn Δ e (A & B)
  → syn Δ (fst e) A

| E&2 :
    syn Δ e (A & B)
  → syn Δ (snd e) B

and chk : lctx _ → obj → tp → type =

| conv :
    syn Δ e A
  → chk Δ e A

% Multiplicatives

| I① :
    exh Δ
  → chk Δ unit ①

| E① :
    syn Δ₁ s ① → chk Δ₂ e C
  → merge Δ₁ Δ₂ Δ
  → chk Δ (elim-unit s e) C

| I⊗ :
    chk Δ₁ e₁ A → chk Δ₂ e₂ B
  → merge Δ₁ Δ₂ Δ
  → chk Δ (tuple e₁ e₂) (A ⊗ B)

| E⊗ :
    syn Δ₁ s (A ⊗ B)
  → ({x:obj} {y:obj} chk (cons (cons Δ₂ x A 𝟙) y B 𝟙) (e x y) C)
  → merge Δ₁ Δ₂ Δ
  → chk Δ (elim-tuple s e) C

| I-o :
    ({x:obj} chk (cons Δ x A 𝟙) (m x) B)
  → chk Δ (lam m) (A -o B)

% Additives

| I& :
    chk Δ e₁ A → chk Δ e₂ B
  → chk Δ (pair e₁ e₂) (A & B)

| I⊕1 :
    chk Δ e A
  → chk Δ (inl e) (A ⊕ B)

| I⊕2 :
    chk Δ e B
  → chk Δ (inr e) (A ⊕ B)

| E⊕:
    syn Δ₁ s (A ⊕ B)
  → ({x:obj} chk (cons Δ₂ x A 𝟙) (e₁ x) C)
  → ({x:obj} chk (cons Δ₂ x B 𝟙) (e₂ x) C)
  → merge Δ₁ Δ₂ Δ
  → chk Δ (elim-sum s e₁ e₂) C;