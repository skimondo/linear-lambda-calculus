%------------------------------------------------------%
% Strengthening / weakening properties
%------------------------------------------------------%

rec prune_seq : (Ψ:ctx) [Ψ,x:var ⊢ seq Δ[..] C[]] → [Ψ ⊢ seq Δ C[]] =
  / total /
  fn SEQ ⇒
  let [_,x:var ⊢ SEQ'[..]] = SEQ in
  [_ ⊢ SEQ']
  ;

rec seq_str : [Ψ ⊢ seq Δ C] → [Ψ ⊢ rmv Δ X A[] used n[] Δ'] → Wf [Ψ ⊢ Δ] → [Ψ ⊢ seq Δ' C] =
  / total 1 /
  fn s1, rm, wf ⇒
  let [_ ⊢ RMV] = rm in
  case s1 of
  | [_ ⊢ hyp RMV1 EXH1] ⇒
    let [_ ⊢ rmv-po RMV2 RMV3 _ _ _ _] = rmv_pushout [_ ⊢ RMV1] [_ ⊢ RMV] (lookup_lab_neq [_ ⊢ RMV1] rm wf) in
    let [_ ⊢ EXH2] = exh_str [_ ⊢ EXH1] [_ ⊢ RMV2] in
    [_ ⊢ hyp RMV3 EXH2]
  | [_ ⊢ R-o \x.SQ1] ⇒
    let [_,x:var ⊢ SQ2] = seq_str [_,x:var ⊢ SQ1] [_,x:var ⊢ rmv/n RMV[..]] (wf_extcons wf) in
    [_ ⊢ R-o \x.SQ2]
  | [_ ⊢ L-o RMV1 MG1 SQ1 \x.SQ2] ⇒
    let [_ ⊢ rmv-po RMV2 RMV3 _ _ _ _] = rmv_pushout [_ ⊢ RMV1] [_ ⊢ RMV] (lookup_lab_neq [_ ⊢ RMV1] rm wf) in
    let [_ ⊢ mg-str RMV2a RMV2b •/us MG2 _ _] = merge_str [_ ⊢ RMV2] [_ ⊢ MG1] in
    let [_ ⊢ SQ3] = seq_str [_ ⊢ SQ1] [_ ⊢ RMV2a] (wf_merge (wf_str wf [_ ⊢ RMV1]) [_ ⊢ MG1]) in
    let [_,x:var ⊢ SQ4] = seq_str [_,x:var ⊢ SQ2] [_,x:var ⊢ rmv/n RMV2b[..]] (wf_extcons (wf_merge_r (wf_str wf [_ ⊢ RMV1]) [_ ⊢ MG1])) in
    [_ ⊢ L-o RMV3 MG2 SQ3 \x.SQ4]
  ;

rec seq_weak : [Ψ ⊢ seq Δ C] → [Ψ ⊢ rmv Δ' X A[] used n[] Δ] → Wf [Ψ ⊢ Δ'] → [Ψ ⊢ seq Δ' C] =
  / total 1 /
  fn sq1, rm, wf ⇒
  let [_ ⊢ RMV] = rm in
  case sq1 of
  | [_ ⊢ hyp RMV1 EXH1] ⇒
    let [_ ⊢ rmv-ch RMV2 RMV3 _ _ _ _] = rmv_changeorder [_ ⊢ RMV] [_ ⊢ RMV1] in
    let [_ ⊢ EXH2] = exh_weak [_ ⊢ EXH1] [_ ⊢ RMV3] in
    [_ ⊢ hyp RMV2 EXH2]
  | [_ ⊢ R-o \x.SQ1] ⇒
    let [_,x:var ⊢ SQ2] = seq_weak [_,x:var ⊢ SQ1] [_,x:var ⊢ rmv/n RMV[..]] (wf_extcons wf) in
    [_ ⊢ R-o \x.SQ2]
  | [_ ⊢ L-o RMV1 MG1 SQ1 \x.SQ2] ⇒
    let [_ ⊢ rmv-ch RMV2 RMV3 _ _ _ _] = rmv_changeorder [_ ⊢ RMV] [_ ⊢ RMV1] in
    let [_ ⊢ mg-weak RMV3a RMV3b MG2 _ _ _] = merge_weak [_ ⊢ RMV3] [_ ⊢ MG1] [ ⊢ •/us] in
    let [_ ⊢ SQ3] = seq_weak [_ ⊢ SQ1] [_ ⊢ RMV3a] (wf_merge (wf_str wf [_ ⊢ RMV2]) [_ ⊢ MG2]) in
    let [_,x:var ⊢ SQ4] = seq_weak [_,x:var ⊢ SQ2] [_,x:var ⊢ rmv/n RMV3b[..]] (wf_extcons (wf_merge_r (wf_str wf [_ ⊢ RMV2]) [_ ⊢ MG2])) in
    [_ ⊢ L-o RMV2 MG2 SQ3 \x.SQ4]
  ;

rec seq_weak_cor : [Ψ ⊢ seq Δ C[]] → Wf [Ψ ⊢ Δ] → {A:[ ⊢ tp]} [Ψ,x:var ⊢ seq (cons Δ[..] x A[] used) C[]] =
  fn SQ, WF ⇒ mlam A ⇒
  let [_ ⊢ SQ']:[_ ⊢ seq Δ _] = SQ in
  let [_ ⊢ get-len LN] = get_len [_ ⊢ Δ] in
  seq_weak [_,x:var ⊢ SQ'[..]] [_,x:var ⊢ rmv/t LN[..]] (wf_extcons WF)
  ;

%------------------------------------------------------%
% Renaming lemma
%------------------------------------------------------%

rec seq_rename : [Ψ ⊢ seq Δ C]
→ [Ψ ⊢ rmv Δ X A[] α[] n[] Δ''] → [Ψ ⊢ rmv Δ' X' A[] α[] n'[] Δ'']
→ Wf [Ψ ⊢ Δ] → Wf [Ψ ⊢ Δ'] → [Ψ ⊢ seq Δ' C] =
  / total 1 /
  fn sq1, rm1, rm2, wf1, wf2 ⇒
  let [_ ⊢ RM2] = rm2 in
  let [_ ⊢ RM1]:[_ ⊢ rmv _ X _ α[] _ _] = rm1 in
  case [ ⊢ α] of
  | [ ⊢ used] ⇒ seq_weak (seq_str sq1 rm1 wf1) rm2 wf2
  | [ ⊢ lin] ⇒
    case sq1 of
    | [_ ⊢ hyp RMV1 EXH] ⇒
      let [_ ⊢ _]:[_ ⊢ rmv _ Y _ _ _ _] = [_ ⊢ RMV1] in
      (case comp_vars [_ ⊢ Y] [_ ⊢ X] of
      | Ct-Eq ⇒
        let [_ ⊢ tp-mult-nat-lctx-refl] = str_runq [_ ⊢ RMV1] rm1 wf1 in
        [_ ⊢ hyp RM2 EXH]
      | Ct-Neq NEQ ⇒
        let [_ ⊢ look RMV2] = lookup_str [_ ⊢ RMV1] rm1 NEQ in
        impossible exh_lookup [_ ⊢ EXH] [_ ⊢ RMV2]
      )
    | [_ ⊢ R-o \x.SQ1] ⇒
      let [_,x:var ⊢ SQ2] = seq_rename [_,x:var ⊢ SQ1] [_,x:var ⊢ rmv/n RM1[..]] [_ ⊢ rmv/n RM2[..]]
        (wf_extcons wf1) (wf_extcons wf2) in
      [_ ⊢ R-o \x.SQ2]
    | [_ ⊢ L-o RMV1 MG1 SQ1 \x.SQ2] ⇒
      let [_ ⊢ _]:[_ ⊢ rmv _ Y _ _ _ _] = [_ ⊢ RMV1] in
      (case comp_vars [_ ⊢ X] [_ ⊢ Y] of
      | Ct-Eq ⇒
        let [_ ⊢ tp-mult-nat-lctx-refl] = str_runq [_ ⊢ RMV1] rm1 wf1 in
        [_ ⊢ L-o RM2 MG1 SQ1 \x.SQ2]
      | Ct-Neq NEQ ⇒
        let [_ ⊢ rmv-po RMV2 RMV3 _ _ _ _] = rmv_pushout [_ ⊢ RM1] [_ ⊢ RMV1] NEQ in
        let [_ ⊢ rmv-ch RMV4 RMV5 _ _ _ _] = rmv_changeorder [_ ⊢ RM2] [_ ⊢ RMV2] in
        let [_ ⊢ mg-str RMV3a RMV3b MLT[] MG2 _ _] = merge_str [_ ⊢ RMV3] [_ ⊢ MG1] in
        let [_ ⊢ mg-weak RMV5a RMV5b MG3 _ _ _] = merge_weak [_ ⊢ RMV5] [_ ⊢ MG2] [ ⊢ MLT] in
        let WF1 = wf_str wf1 [_ ⊢ RMV1] in
        let WF2 = wf_str wf2 [_ ⊢ RMV4] in
        let [_ ⊢ SQ3] = seq_rename [_ ⊢ SQ1] [_ ⊢ RMV3a] [_ ⊢ RMV5a] (wf_merge WF1 [_ ⊢ MG1]) (wf_merge WF2 [_ ⊢ MG3]) in
        let [_,x:var ⊢ SQ4] = seq_rename [_,x:var ⊢ SQ2] [_,x:var ⊢ rmv/n RMV3b[..]] [_,x:var ⊢ rmv/n RMV5b[..]]
          (wf_extcons (wf_merge_r WF1 [_ ⊢ MG1])) (wf_extcons (wf_merge_r WF2 [_ ⊢ MG3])) in
        [_ ⊢ L-o RMV4 MG3 SQ3 \x.SQ4]
      )
  ;