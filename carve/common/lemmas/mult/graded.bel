%======================================================%
% Algebraic properties of multiplicities
% (graded systems)
%======================================================%

% Totality: For any α₁, α₂, there exists an α such that α₁ ∙ α₂ = α

LF get∙ : mult → mult → type =
| get-∙ : • α₁ α₂ α → get∙ α₁ α₂;

rec mult_total : {α₁:[ ⊢ mult]} {α₂:[ ⊢ mult]} [ ⊢ get∙ α₁ α₂] =
  / total /
  mlam α₁, α₂ ⇒
  let [ ⊢ num n] = [ ⊢ α₁] in
  let [ ⊢ num m] = [ ⊢ α₂] in
  let [ ⊢ get-plus P] = plus_total [ ⊢ n] [ ⊢ m] in
  [ ⊢ get-∙ (•/plus P)]
  ;

% Functionality: If α₁ ∙ α₂ = α and α₁ ∙ α₂ = α', then α = α'

rec mult_func : [ ⊢ • α₁ α₂ α] → [ ⊢ • α₁ α₂ α'] → [ ⊢ mult_eq α α'] =
  / total /
  fn m1, m2 ⇒
  let [ ⊢ •/plus P1] = m1 in
  let [ ⊢ •/plus P2] = m2 in
  let [ ⊢ nat/refl] = plus_func [ ⊢ P1] [ ⊢ P2] in
  [ ⊢ mult/refl]
  ;

% Identity: 
% (1) If α₁ ∙ α₂ = α and α₁ is an identity element, then α₂ = α
% (2) For any α, obtain an identity element β such that β • α = α

rec mult_id : [ ⊢ • α₁ α₂ α] → [ ⊢ ident α₁] → [ ⊢ mult_eq α₂ α] =
  / total /
  fn m, u ⇒
  let [ ⊢ ident/z] = u in
  let [ ⊢ •/plus pl/z] = m in
  [ ⊢ mult/refl]
  ;

LF get_u∙ : mult → type =
| get-u∙ : ident α → • α β β → get_u∙ β;

rec mult_get_id : {β:[ ⊢ mult]} [ ⊢ get_u∙ β] =
  / total /
  mlam α ⇒ let [ ⊢ num n] = [ ⊢ α] in [ ⊢ get-u∙ ident/z (•/plus pl/z)]
  ;

% Zero-sum-freedom: If α₁ ∙ α₂ = α and α is an identity element, then α₁ = α

rec mult_zsfree : [ ⊢ • α₁ α₂ α] → [ ⊢ ident α] → [ ⊢ mult_eq α₁ α] =
  / total /
  fn m, u ⇒ 
  let [ ⊢ ident/z] = u in
  let [ ⊢ •/plus pl/z] = m in
  [ ⊢ mult/refl]
  ;

% Commutativity: If α₁ ∙ α₂ = α, then α₂ ∙ α₁ = α

rec mult_comm : [ ⊢ • α₁ α₂ α] → [ ⊢ • α₂ α₁ α] =
  / total /
  fn m ⇒ 
  let [ ⊢ •/plus P1] = m in
  let [ ⊢ P2] = plus_comm [ ⊢ P1] in
  [ ⊢ •/plus P2]
  ;

% Associativity: If (α₁ • α₂) • α₃ = α, then α₁ • (α₂ • α₃) = α

LF •assoc : • _ _ _ → • _ _ _ → type =
  •/assoc : • α₂ α₃ α₂₃ → • α₁ α₂₃ α → {M1:• α₁ α₂ α₁₂} {M2:• α₁₂ α₃ α} •assoc M1 M2;

rec mult_assoc : {M1:[ ⊢ • α₁ α₂ α₁₂]} {M2:[ ⊢ • α₁₂ α₃ α]} [ ⊢ •assoc M1 M2] =
  / total /
  mlam M1, M2 ⇒
  let [ ⊢ •/plus P1] = [ ⊢ M1] in
  let [ ⊢ •/plus P2] = [ ⊢ M2] in
  let [ ⊢ pl-assoc P3 P4 _ _] = plus_assoc [ ⊢ P1] [ ⊢ P2] in
  [ ⊢ •/assoc (•/plus P3) (•/plus P4) _ _]
  ;

% Cancellativity: If α₁ ∙ α₂ = α and α₁ ∙ α₂' = α, then α₂ = α₂'

rec mult_canc : [ ⊢ • α₁ α₂ α] → [ ⊢ • α₁ α₂' α] → [ ⊢ mult_eq α₂ α₂'] =
  / total /
  fn m1, m2 ⇒
  let [ ⊢ •/plus P1] = m1 in
  let [ ⊢ •/plus P2] = m2 in
  let [ ⊢ nat/refl] = plus_canc [ ⊢ P1] [ ⊢ P2] in
  [ ⊢ mult/refl]
  ;

%------------------------------------------------------%
% Properties of unrestricted elements
%------------------------------------------------------%

% Technical lemmas about unrestricted elements (used to prove context lemmas)

rec mult_unr_id : [ ⊢ unr α] → [ ⊢ • α α α] =
  / total /
  fn u ⇒ let [ ⊢ unr/z] = u in [ ⊢ •/plus pl/z]
  ;

rec mult_ident_unr : [ ⊢ ident α] → [ ⊢ unr α] =
  / total /
  fn u ⇒ let [ ⊢ ident/z] = u in [ ⊢ unr/z]
  ;

rec mult_unr_ident : [ ⊢ unr α] → [ ⊢ ident α] =
  / total /
  fn u ⇒ let [ ⊢ unr/z] = u in [ ⊢ ident/z]
  ;
